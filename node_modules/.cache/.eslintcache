[{"C:\\Users\\Madar\\Desktop\\TalentTrackerFrontEnd\\src\\index.js":"1","C:\\Users\\Madar\\Desktop\\TalentTrackerFrontEnd\\src\\App.js":"2","C:\\Users\\Madar\\Desktop\\TalentTrackerFrontEnd\\src\\reportWebVitals.js":"3","C:\\Users\\Madar\\Desktop\\TalentTrackerFrontEnd\\src\\components\\HomePage.js":"4","C:\\Users\\Madar\\Desktop\\TalentTrackerFrontEnd\\src\\components\\Register.js":"5","C:\\Users\\Madar\\Desktop\\TalentTrackerFrontEnd\\src\\components\\Login.js":"6","C:\\Users\\Madar\\Desktop\\TalentTrackerFrontEnd\\src\\components\\UserHome.js":"7","C:\\Users\\Madar\\Desktop\\TalentTrackerFrontEnd\\src\\components\\About.js":"8","C:\\Users\\Madar\\Desktop\\TalentTrackerFrontEnd\\src\\components\\Navbar.js":"9","C:\\Users\\Madar\\Desktop\\TalentTrackerFrontEnd\\src\\components\\Footer.js":"10","C:\\Users\\Madar\\Desktop\\TalentTrackerFrontEnd\\src\\components\\Admin.js":"11","C:\\Users\\Madar\\Desktop\\TalentTrackerFrontEnd\\src\\components\\Profile.js":"12","C:\\Users\\Madar\\Desktop\\TalentTrackerFrontEnd\\src\\components\\RecurterRegister.js":"13","C:\\Users\\Madar\\Desktop\\TalentTrackerFrontEnd\\src\\components\\EmployerLogin.js":"14","C:\\Users\\Madar\\Desktop\\TalentTrackerFrontEnd\\src\\components\\EmployerHome.js":"15","C:\\Users\\Madar\\Desktop\\TalentTrackerFrontEnd\\src\\components\\ForgotPassword.js":"16","C:\\Users\\Madar\\Desktop\\TalentTrackerFrontEnd\\src\\components\\JobDetailPage.js":"17","C:\\Users\\Madar\\Desktop\\TalentTrackerFrontEnd\\src\\components\\EmployerForgotPassword.js":"18","C:\\Users\\Madar\\Desktop\\TalentTrackerFrontEnd\\src\\components\\UserProvider.js":"19","C:\\Users\\Madar\\Desktop\\TalentTrackerFrontEnd\\src\\components\\OTPVerification.js":"20","C:\\Users\\Madar\\Desktop\\TalentTrackerFrontEnd\\src\\components\\Sidebar.js":"21","C:\\Users\\Madar\\Desktop\\TalentTrackerFrontEnd\\src\\components\\JobsList.js":"22","C:\\Users\\Madar\\Desktop\\TalentTrackerFrontEnd\\src\\components\\Jobs.js":"23","C:\\Users\\Madar\\Desktop\\TalentTrackerFrontEnd\\src\\components\\UserTable.js":"24","C:\\Users\\Madar\\Desktop\\TalentTrackerFrontEnd\\src\\components\\CustomJobCard.js":"25"},{"size":552,"mtime":1694579317670,"results":"26","hashOfConfig":"27"},{"size":3773,"mtime":1695216873379,"results":"28","hashOfConfig":"27"},{"size":375,"mtime":1694579317672,"results":"29","hashOfConfig":"27"},{"size":1225,"mtime":1694579317629,"results":"30","hashOfConfig":"27"},{"size":9136,"mtime":1694579317639,"results":"31","hashOfConfig":"27"},{"size":4153,"mtime":1695217439540,"results":"32","hashOfConfig":"27"},{"size":2351,"mtime":1695203049273,"results":"33","hashOfConfig":"27"},{"size":1009,"mtime":1694579317621,"results":"34","hashOfConfig":"27"},{"size":3579,"mtime":1695216212732,"results":"35","hashOfConfig":"27"},{"size":1731,"mtime":1694579317627,"results":"36","hashOfConfig":"27"},{"size":332,"mtime":1694579317622,"results":"37","hashOfConfig":"27"},{"size":21575,"mtime":1695191385748,"results":"38","hashOfConfig":"27"},{"size":10724,"mtime":1695207890869,"results":"39","hashOfConfig":"27"},{"size":4285,"mtime":1695217470814,"results":"40","hashOfConfig":"27"},{"size":592,"mtime":1694579317625,"results":"41","hashOfConfig":"27"},{"size":6107,"mtime":1694579317628,"results":"42","hashOfConfig":"27"},{"size":4271,"mtime":1694579317631,"results":"43","hashOfConfig":"27"},{"size":6142,"mtime":1694579317624,"results":"44","hashOfConfig":"27"},{"size":1394,"mtime":1695212904617,"results":"45","hashOfConfig":"27"},{"size":2260,"mtime":1695099931666,"results":"46","hashOfConfig":"27"},{"size":1512,"mtime":1694579317640,"results":"47","hashOfConfig":"27"},{"size":442,"mtime":1694579317633,"results":"48","hashOfConfig":"27"},{"size":3411,"mtime":1694579317632,"results":"49","hashOfConfig":"27"},{"size":739,"mtime":1694579317643,"results":"50","hashOfConfig":"27"},{"size":2752,"mtime":1694579317623,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"yb9s98",{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"59"},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"69","messages":"70","suppressedMessages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"73"},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"78"},{"filePath":"79","messages":"80","suppressedMessages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","suppressedMessages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85"},{"filePath":"86","messages":"87","suppressedMessages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"89","messages":"90","suppressedMessages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"92","messages":"93","suppressedMessages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"96"},{"filePath":"97","messages":"98","suppressedMessages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"101"},{"filePath":"102","messages":"103","suppressedMessages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105"},{"filePath":"106","messages":"107","suppressedMessages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"109","messages":"110","suppressedMessages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"112","messages":"113","suppressedMessages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"115","messages":"116","suppressedMessages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"118","messages":"119","suppressedMessages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"121","messages":"122","suppressedMessages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"124","messages":"125","suppressedMessages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"127","messages":"128","suppressedMessages":"129","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"130","messages":"131","suppressedMessages":"132","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"133","messages":"134","suppressedMessages":"135","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"136","messages":"137","suppressedMessages":"138","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Madar\\Desktop\\TalentTrackerFrontEnd\\src\\index.js",[],[],"C:\\Users\\Madar\\Desktop\\TalentTrackerFrontEnd\\src\\App.js",["139","140","141"],[],"import React, { useState, useEffect } from 'react';\r\nimport { BrowserRouter as Router, Route, Routes } from 'react-router-dom';\r\nimport HomePage from './components/HomePage';\r\nimport Login from './components/Login';\r\nimport Register from './components/Register';\r\nimport Navbar from './components/Navbar';\r\nimport About from './components/About';\r\nimport Footer from './components/Footer';\r\nimport UserHome from './components/UserHome';\r\nimport Admin from './components/Admin';\r\nimport Profile from './components/Profile';\r\nimport RecurterRegister from './components/RecurterRegister';\r\nimport EmployerLogin from './components/EmployerLogin';\r\nimport EmployerHome from './components/EmployerHome';\r\nimport ForgotPassword from './components/ForgotPassword';\r\nimport JobDetailPage from './components/JobDetailPage';\r\nimport UserProvider  from './components/UserProvider';\r\nimport EmployerForgotPassword from './components/EmployerForgotPassword'\r\nimport axios from 'axios';\r\n\r\nconst App = () => {\r\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n  const [userType, setUserType] = useState('');\r\n  // Example job data\r\n  const jobs = [\r\n    {\r\n      id: 1,\r\n      title: 'Fullstack Developer',\r\n      company: 'TechCorp',\r\n      location: 'San Francisco',\r\n      salary: '100,000 - 120,000 USD',\r\n      experience: '3-5 Years',\r\n    },\r\n    {\r\n      id: 2,\r\n      title: 'Frontend Developer',\r\n      company: 'WebTech',\r\n      location: 'New York',\r\n      salary: '90,000 - 110,000 USD',\r\n      experience: '2-4 Years',\r\n    },\r\n    // Add more jobs as needed\r\n  ];\r\n\r\n // Check for a valid token in localStorage on component mount\r\n useEffect(() => {\r\n  const jwtToken = localStorage.getItem('jwtToken');\r\n  if (jwtToken) {\r\n    axios.defaults.headers.common['Authorization'] = `Bearer ${jwtToken}`;\r\n    setIsLoggedIn(true);\r\n  }\r\n}, []); // Empty dependency array ensures this effect runs once on component mount\r\n\r\n  const handleLogin = () => {\r\n    setIsLoggedIn(true);\r\n    \r\n    // Retrieve the JWT token from localStorage\r\n    const jwtToken = localStorage.getItem('jwtToken');\r\n   \r\n    // Include the token in the Axios default headers\r\n    if (jwtToken) {\r\n      axios.defaults.headers.common['Authorization'] = `Bearer ${jwtToken}`;\r\n      \r\n    }\r\n  };\r\n  \r\n\r\n  const handleLogout = () => {\r\n    setIsLoggedIn(false);\r\n    // Remove the JWT token from localStorage\r\n    localStorage.removeItem('jwtToken');\r\n    localStorage.removeItem('userType');\r\n\r\n  };\r\n  \r\n\r\n  return (\r\n    <UserProvider> {/* Wrap routes that require user context */}\r\n    <Router>\r\n    <Navbar isLoggedIn={isLoggedIn} handleLogout={handleLogout} />\r\n      \r\n        <Routes>\r\n          <Route path=\"/\" element={<HomePage />} />\r\n          <Route path=\"/login\" element={<Login handleLogin={handleLogin} />} />\r\n          <Route path=\"/register\" element={<Register />} />\r\n          <Route path=\"/about\" element={<About />} />\r\n  \r\n          <Route path=\"/employerRegister\" element={<RecurterRegister />} />\r\n          <Route path=\"/employerlogin\" element={<EmployerLogin handleLogin={handleLogin} />} />\r\n          <Route path=\"/forgot-password\" element={<ForgotPassword />} />\r\n          <Route path=\"/forgot-password-employer\" element={<EmployerForgotPassword />} />\r\n          <Route path=\"/profile\" element={<Profile />} />\r\n          <Route path=\"/job/:id\" element={<JobDetailPage /> } />\r\n  \r\n          {isLoggedIn ? (\r\n            <>\r\n              <Route path=\"/user\" element={<UserHome />} />\r\n              <Route path=\"/admin\" element={<Admin />} />\r\n              <Route path=\"/employer\" element={<EmployerHome />} />\r\n            </>\r\n          ) : null}\r\n        </Routes>\r\n     \r\n      <Footer />\r\n    </Router>\r\n    </UserProvider>\r\n  );\r\n};\r\n\r\nexport default App;\r\n",[],"C:\\Users\\Madar\\Desktop\\TalentTrackerFrontEnd\\src\\reportWebVitals.js",[],[],"C:\\Users\\Madar\\Desktop\\TalentTrackerFrontEnd\\src\\components\\HomePage.js",["142","143","144"],[],"C:\\Users\\Madar\\Desktop\\TalentTrackerFrontEnd\\src\\components\\Register.js",["145"],[],"C:\\Users\\Madar\\Desktop\\TalentTrackerFrontEnd\\src\\components\\Login.js",["146","147","148"],[],"import React, { useState } from 'react';\r\nimport { useNavigate, useLocation, Link } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport '../css/LoginForm.css';\r\nimport ForgotPassword from './ForgotPassword';\r\nimport { useUserContext } from './UserProvider';\r\n\r\nconst Login = ({ handleLogin }) => {\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [errorMessage, setErrorMessage] = useState('');\r\n  const location = useLocation();\r\n  const registrationSuccess = location.state?.registrationSuccess;\r\n  const navigate = useNavigate();\r\n  const apiUrl = process.env.REACT_APP_API_BASE_URL;\r\n  // Get the setUser function from the UserContext\r\n  const { setUser } = useUserContext();\r\n  const { setUserType } = useUserContext();\r\n\r\n  const isFormValid = () => {\r\n    if (!email.trim() || !password.trim()) {\r\n      return false; // Username and password should not be empty or whitespace only\r\n    }\r\n    return true;\r\n  };\r\n\r\n  // Helper function to set JWT token in localStorage\r\n  const setJwtToken = (token) => {\r\n    localStorage.setItem('jwtToken', token);\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    if (!isFormValid()) {\r\n      window.alert('Please enter both username and password.');\r\n      return;\r\n    }\r\n    try {\r\n      let loginEndpoint;\r\n      let count;\r\n      if (email === 'admin' && password === 'admin') {\r\n        count = 0;\r\n        loginEndpoint = `${apiUrl}/adminlogin`; // User login endpoint\r\n      } else {\r\n        count = 1;\r\n        loginEndpoint = `${apiUrl}/login`; // Admin login endpoint\r\n      }\r\n\r\n      const response = await axios.post(loginEndpoint, {\r\n        email,\r\n        password,\r\n      });\r\n\r\n      if (response.status === 200) {\r\n        // Assuming the response.data contains user data\r\n        const userData = response.data;\r\n        console.log('this is response ',userData.token);\r\n        localStorage.setItem('jwtToken', userData.token);\r\n        localStorage.setItem('userType', userData.userType);\r\n       \r\n\r\n        // Access and store the JWT token from the Authorization header\r\n        const jwtToken = response.headers.authorization;\r\n        \r\n        // Set JWT token in localStorage\r\n        //setJwtToken(jwtToken);\r\n\r\n        setErrorMessage('');\r\n        handleLogin();\r\n\r\n        // Set user data in the context\r\n        setUser(userData);\r\n        setUserType(userData.userType);\r\n        console.log('Login successful', userData);\r\n\r\n        if (count === 0) {\r\n          navigate('/admin');\r\n        } else {\r\n          navigate('/user');\r\n        }\r\n\r\n        // You can now use `jwtToken` for making authenticated requests.\r\n        //console.log('JWT Token:', jwtToken);\r\n      } else {\r\n        setErrorMessage('Login failed. Please check your user name and password.');\r\n        console.error('Login failed');\r\n      }\r\n    } catch (error) {\r\n      setErrorMessage('Login failed. Please check your user name and password.');\r\n      console.error('Login failed', error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"login-form-container\">\r\n      <form className=\"login-form\" onSubmit={handleSubmit}>\r\n        {registrationSuccess && (\r\n          <div className=\"success-message\">\r\n            Registration successful! Please log in to continue.\r\n          </div>\r\n        )}\r\n        <h2>Login</h2>\r\n        <div className=\"form-group\">\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Enter your Email\"\r\n            value={email}\r\n            onChange={(e) => setEmail(e.target.value)}\r\n          />\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <input\r\n            type=\"password\"\r\n            placeholder=\"Password\"\r\n            value={password}\r\n            onChange={(e) => setPassword(e.target.value)}\r\n          />\r\n        </div>\r\n        <Link to=\"/forgot-password\" className=\"forgot-password-link\">\r\n          Forgot Password\r\n        </Link>\r\n        <button type=\"submit\">Login</button>\r\n\r\n        {errorMessage && <div className=\"error-message\">{errorMessage}</div>}\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n",[],"C:\\Users\\Madar\\Desktop\\TalentTrackerFrontEnd\\src\\components\\UserHome.js",["149","150"],[],"import React, { useState } from 'react';\r\n\r\nimport Sidebar from './Sidebar';\r\n\r\nimport Grid from '@mui/material/Grid';\r\n\r\nimport { styled } from '@mui/material/styles';\r\n\r\nimport Typography from '@mui/material/Typography';\r\n\r\nimport Pagination from '@mui/material/Pagination';\r\n\r\nimport JobsList from './JobsList';\r\n\r\nimport {Jobs} from './Jobs';\r\nimport { useLocation } from 'react-router-dom';\r\n \r\n\r\nconst ContentWrapper = styled('div')({\r\n\r\n  padding: (theme) => theme.spacing(2), // Add spacing to the content\r\n\r\n});\r\n\r\n \r\n\r\nfunction UserHome() {\r\n\r\n  const location = useLocation();\r\n  const queryParams = new URLSearchParams(location.search);\r\n  const success = queryParams.get('success');\r\n  const [selectedJob, setSelectedJob] = useState(null);\r\n\r\n \r\n\r\n  const jobsPerPage = 6;\r\n\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n\r\n \r\n\r\n  const handleChangePage = (event, newPage) => {\r\n\r\n    setCurrentPage(newPage);\r\n\r\n  };\r\n\r\n \r\n\r\n  const startIndex = (currentPage - 1) * jobsPerPage;\r\n\r\n  const endIndex = startIndex + jobsPerPage;\r\n\r\n  const jobsToDisplay = Jobs.slice(startIndex, endIndex);\r\n\r\n \r\n\r\n  return (\r\n\r\n    <Grid container spacing={0}>\r\n\r\n       {success === 'profile-updated' && (\r\n        <div style={{ backgroundColor: 'green', color: 'white', padding: '10px' }}>\r\n          Profile updated successfully!\r\n        </div>\r\n      )}\r\n      <Grid item xs={12} sm={2} sx={{ display: 'flex', justifyContent: 'center', pt: 1, pr: 0 }}>\r\n\r\n        <Sidebar />\r\n\r\n      </Grid>\r\n\r\n \r\n\r\n      <Grid item xs={12} sm={10} sx={{ display: 'flex' }}>\r\n\r\n        <ContentWrapper>\r\n\r\n          <Typography variant=\"h4\" className=\"recommended-text\">\r\n\r\n            Recommended jobs for you!\r\n\r\n          </Typography>\r\n\r\n \r\n\r\n \r\n\r\n          <JobsList jobs={jobsToDisplay} />\r\n\r\n \r\n\r\n \r\n\r\n          <div style={{ display: 'flex', marginTop: 'auto', alignSelf: 'flex-end' }}>\r\n\r\n            {Jobs.length > jobsPerPage && (\r\n\r\n              <Pagination\r\n\r\n                count={Math.ceil(Jobs.length / jobsPerPage)}\r\n\r\n                page={currentPage}\r\n\r\n                onChange={handleChangePage}\r\n\r\n                variant=\"outlined\"\r\n\r\n                shape=\"rounded\"\r\n\r\n              />\r\n\r\n            )}\r\n\r\n          </div>\r\n\r\n        </ContentWrapper>\r\n\r\n      </Grid>\r\n\r\n    </Grid>\r\n\r\n  );\r\n\r\n}\r\n\r\n \r\n\r\nexport default UserHome;",[],"C:\\Users\\Madar\\Desktop\\TalentTrackerFrontEnd\\src\\components\\About.js",[],[],"C:\\Users\\Madar\\Desktop\\TalentTrackerFrontEnd\\src\\components\\Navbar.js",["151"],[],"import React, { useEffect } from 'react';\r\nimport { Link, useNavigate } from 'react-router-dom';\r\nimport axios from 'axios'; // Import axios for making API requests\r\nimport '../css/Navbar.css';\r\nimport logo from '../images/logo.png';\r\nimport { useUserContext } from './UserProvider';\r\n\r\n\r\nconst Navbar = ({ isLoggedIn,handleLogout }) => {\r\n  const navigate = useNavigate();\r\n  const apiUrl = process.env.REACT_APP_API_BASE_URL;\r\n  const { userType, setUserType } = useUserContext();\r\n\r\n\r\n  // Retrieve userType from localStorage when the component loads\r\n  useEffect(() => {\r\n    const storedUserType = localStorage.getItem('userType');\r\n  if (storedUserType) {\r\n    setUserType(storedUserType); // Set userType from localStorage\r\n  }\r\n  }, []);\r\n// Function to navigate to the user home\r\nconst goToUserHome = () => {\r\n  navigate('/user');\r\n};\r\n\r\n// Function to navigate to the employer home\r\nconst goToEmployerHome = () => {\r\n  navigate('/employer');\r\n};\r\n  \r\n  const logout = async () => {\r\n\r\n\r\n\r\n    try {\r\n      // Get the JWT token from local storage\r\n      const jwtToken = localStorage.getItem('jwtToken');\r\n       console.log('jwt token',jwtToken);\r\n      // Make a POST request to the sign-out endpoint on your backend\r\n      const response = await axios.post(`${apiUrl}/signOut`, {\r\n        // Include any necessary data in the request body\r\n      }, {\r\n        headers: {\r\n          Authorization: `Bearer ${jwtToken}`, // Include the JWT token in the Authorization header\r\n        },\r\n      });\r\n\r\n      if (response.status === 204) {\r\n        // Successful logout on the server\r\n        handleLogout(); // Perform client-side logout actions (e.g., clear tokens)\r\n\r\n        // Clear JWT token from local storage\r\n        localStorage.removeItem('jwtToken');\r\n        \r\n        navigate('/');\r\n      } else {\r\n        console.error('Logout failed');\r\n      }\r\n    } catch (error) {\r\n      console.error('Logout failed', error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <nav className=\"navbar\">\r\n      <div className=\"navbar-left\">\r\n        <h3 className=\"navbar-title\">\r\n          <img src={logo} alt=\"Talent Tracker\" />\r\n        </h3>\r\n      </div>\r\n      <ul className=\"navbar-list\">\r\n        <li className=\"navbar-item\">\r\n          <Link to=\"/\" className=\"navbar-link\">\r\n             Home\r\n          </Link>\r\n        </li>\r\n        <li className=\"navbar-item\">\r\n          <Link to=\"/about\" className=\"navbar-link\">\r\n             About\r\n          </Link>\r\n        </li>\r\n        {isLoggedIn ? (\r\n           <>\r\n           <li className=\"navbar-item\">\r\n             {userType === 'jobseeker' ? (\r\n               <button className=\"navbar-link\" onClick={goToUserHome}>\r\n                 Dashboard\r\n               </button>\r\n             ) : userType === 'employer' ? (\r\n               <button className=\"navbar-link\" onClick={goToEmployerHome}>\r\n                 Dashboard\r\n               </button>\r\n             ) : null}\r\n           </li>\r\n           <li className=\"navbar-item\">\r\n             <button className=\"navbar-link\" onClick={logout}>\r\n               Logout\r\n             </button>\r\n           </li>\r\n         </>\r\n        ) : (<>\r\n          <li className=\"navbar-item\">\r\n            <Link to=\"/login\" className=\"navbar-link\">\r\n            JobSeekerLogin\r\n            </Link>\r\n          </li>\r\n           \r\n          <li className=\"navbar-item\">\r\n            <Link to=\"/employerlogin\" className=\"navbar-link\">\r\n             RecruiterLogin\r\n            </Link>\r\n          </li>\r\n          </>\r\n        )}\r\n      </ul>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n","C:\\Users\\Madar\\Desktop\\TalentTrackerFrontEnd\\src\\components\\Footer.js",[],[],"C:\\Users\\Madar\\Desktop\\TalentTrackerFrontEnd\\src\\components\\Admin.js",[],[],"C:\\Users\\Madar\\Desktop\\TalentTrackerFrontEnd\\src\\components\\Profile.js",["152","153","154","155"],[],"import React, { useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport \"../css/Profile.css\";\r\nimport Sidebar from \"./Sidebar\";\r\nimport axios from \"axios\";\r\nconst apiUrl = process.env.REACT_APP_API_BASE_URL;\r\n\r\n \r\n\r\nconst Profile = () => {\r\n  const navigate = useNavigate();\r\n\r\n  \r\n\r\n  const [basicDetails, setBasicDetails] = useState({\r\n\r\n    firstName: \"\",\r\n\r\n    lastName: \"\",\r\n\r\n    dateOfBirth: \"\",\r\n\r\n    address: \"\",\r\n\r\n    city: \"\",\r\n\r\n    state: \"\",\r\n\r\n    pincode: \"\",\r\n\r\n    alternatePhoneNumber: \"\",\r\n\r\n  });\r\n\r\n \r\n\r\n  const [xClassDetails, setXClassDetails] = useState({\r\n\r\n    xschoolName: \"\",\r\n\r\n    xboard: \"\",\r\n\r\n    xpercentage: \"\",\r\n\r\n    xyearOfPassing: \"\",\r\n\r\n    xCity: \"\",\r\n\r\n    xState: \"\",\r\n\r\n    xPincode: \"\",\r\n\r\n  });\r\n\r\n \r\n\r\n  const [intermediateDetails, setIntermediateDetails] = useState({\r\n\r\n    icollegeName: \"\",\r\n\r\n    iboard: \"\",\r\n\r\n    iprogram: \"\",\r\n\r\n    ipercentage: \"\",\r\n\r\n    iyearOfPassing: \"\",\r\n\r\n    iCity: \"\",\r\n\r\n    iState: \"\",\r\n\r\n  });\r\n\r\n \r\n\r\n  const [graduationDetails, setGraduationDetails] = useState({\r\n\r\n    gcollegeName: \"\",\r\n\r\n    gboard: \"\",\r\n\r\n    gprogram: \"\",\r\n\r\n    gpercentage: \"\",\r\n\r\n    gyearOfPassing: \"\",\r\n\r\n    gCity: \"\",\r\n\r\n    gState: \"\",\r\n\r\n  });\r\n\r\n  // Skills state\r\n  const [skills, setSkills] = useState(\"\");\r\n  const [experienceDetails, setExperienceDetails] = useState([\r\n    {\r\n      company: \"\",\r\n      position: \"\",\r\n      startDate: \"\",\r\n      endDate: \"\",\r\n    },\r\n  ]);\r\n  \r\n  \r\n\r\n  const [resumeFile, setResumeFile] = useState(null);\r\n  const [dragging, setDragging] = useState(false);\r\n\r\n  const [selectedSkill, setSelectedSkill] = useState(\"\");\r\n\r\n\r\n  const handleExperienceChange = (e, index, field) => {\r\n    const newExperienceDetails = [...experienceDetails];\r\n    newExperienceDetails[index][field] = e.target.value;\r\n    setExperienceDetails(newExperienceDetails);\r\n  };\r\n  const addExperience = () => {\r\n    setExperienceDetails([\r\n      ...experienceDetails,\r\n      { company: \"\", position: \"\", startDate: \"\", endDate: \"\" }\r\n    ]);\r\n  };\r\n  \r\n  \r\n  const handleSkillSelect = (skill) => {\r\n    if (skills.includes(skill)) {\r\n      setSkills(skills.filter((s) => s !== skill));\r\n    } else {\r\n      setSkills([...skills, skill]);\r\n    }\r\n  };\r\n  \r\n\r\n  const handleFileDrop = (e) => {\r\n    e.preventDefault();\r\n    setDragging(false);\r\n    const file = e.dataTransfer.files[0];\r\n    setResumeFile(file);\r\n  };\r\n  \r\n \r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n  \r\n    // Prepare data to be sent\r\n    const userData = {\r\n      basicDetails,\r\n      xClassDetails,\r\n      intermediateDetails,\r\n      graduationDetails,\r\n      skills,\r\n      experienceDetails,\r\n    };\r\n  \r\n    try {\r\n      // Get the JWT token from local storage\r\n      const jwtToken = localStorage.getItem('jwtToken');\r\n       console.log('jwt token',jwtToken);\r\n      // Make a POST request to the sign-out endpoint on your backend\r\n      const response = await axios.post(`${apiUrl}/updateProfile`, userData, {\r\n        headers: {\r\n          Authorization: `Bearer ${jwtToken}`, // Include the JWT token in the Authorization header\r\n        },\r\n      });\r\n      if (response.status=200) {\r\n        // Data successfully sent to the backend\r\n        console.log('Data sent successfully!');\r\n        \r\n        // Navigate to the \"user\" page\r\n        navigate(\"/user\");\r\n       \r\n      } else {\r\n        // Handle error case\r\n        console.error('Failed to send data to the backend');\r\n      }\r\n      \r\n    } catch (error) {\r\n      console.error('An error occurred:', error);\r\n    }\r\n  };\r\n  \r\n  \r\n  \r\n\r\n  return (\r\n    <div className=\"profile-container\">\r\n      <div className=\"sidebar\">\r\n       <Sidebar />\r\n      </div>\r\n\r\n     \r\n    <form className=\"profile-form-container\" onSubmit={handleSubmit}>\r\n       <h1>Update your profile</h1>\r\n       \r\n      {/* File Upload section */}\r\n      <div className=\"file-upload-container\">\r\n        <p className=\"Details-name\">Upload your resume:</p>\r\n        <input\r\n          type=\"file\"\r\n          accept=\".pdf,.doc,.docx\"\r\n          onChange={(e) => setResumeFile(e.target.files[0])}\r\n        />\r\n        <div\r\n        className={`file-drop-area ${dragging ? \"dragging\" : \"\"}`}\r\n        onDrop={handleFileDrop}\r\n        onDragOver={(e) => {\r\n          e.preventDefault();\r\n          setDragging(true);\r\n        }}\r\n        onDragLeave={() => setDragging(false)}\r\n      >\r\n        <p className=\"Details-name\">Drag and drop your resume here</p>\r\n      </div>\r\n\r\n      </div>\r\n\r\n\r\n      <p className=\"Details-name\">Basic Details:</p>\r\n\r\n      <table>\r\n\r\n        <tbody>\r\n\r\n          <tr>\r\n\r\n            <td>\r\n\r\n              <input\r\n\r\n                type=\"text\"\r\n\r\n                placeholder=\"FirstName\"\r\n\r\n                className=\"firstName\"\r\n\r\n                value={basicDetails.firstName}\r\n\r\n                onChange={(e) =>\r\n\r\n                  setBasicDetails({\r\n\r\n                    ...basicDetails,\r\n\r\n                    firstName: e.target.value,\r\n\r\n                  })\r\n\r\n                }\r\n\r\n              />\r\n\r\n            </td>\r\n\r\n            <td>\r\n\r\n              <input\r\n\r\n                type=\"text\"\r\n\r\n                placeholder=\"LastName\"\r\n\r\n                className=\"lastName\"\r\n\r\n                value={basicDetails.lastName}\r\n\r\n                onChange={(e) =>\r\n\r\n                  setBasicDetails({ ...basicDetails, lastName: e.target.value })\r\n\r\n                }\r\n\r\n              />\r\n\r\n            </td>\r\n\r\n          </tr>\r\n\r\n          <tr>\r\n\r\n            <td>\r\n\r\n              <input\r\n\r\n                type=\"date\"\r\n\r\n                placeholder=\"DateOfBirth\"\r\n\r\n                className=\"dateofbirth\"\r\n\r\n                value={basicDetails.dateOfBirth}\r\n\r\n                onChange={(e) =>\r\n\r\n                  setBasicDetails({\r\n\r\n                    ...basicDetails,\r\n\r\n                    dateOfBirth: e.target.value,\r\n\r\n                  })\r\n\r\n                }\r\n\r\n              />\r\n\r\n            </td>\r\n\r\n            <td>\r\n\r\n              <input\r\n\r\n                type=\"text\"\r\n\r\n                placeholder=\"Address\"\r\n\r\n                value={basicDetails.address}\r\n\r\n                onChange={(e) =>\r\n\r\n                  setBasicDetails({ ...basicDetails, address: e.target.value })\r\n\r\n                }\r\n\r\n              />\r\n\r\n            </td>\r\n\r\n          </tr>\r\n\r\n          <tr>\r\n\r\n            <td>\r\n\r\n              <input\r\n\r\n                type=\"text\"\r\n\r\n                placeholder=\"City\"\r\n\r\n                value={basicDetails.city}\r\n\r\n                onChange={(e) =>\r\n\r\n                  setBasicDetails({ ...basicDetails, city: e.target.value })\r\n\r\n                }\r\n\r\n              />\r\n\r\n            </td>\r\n\r\n            <td>\r\n\r\n              <input\r\n\r\n                type=\"text\"\r\n\r\n                placeholder=\"State\"\r\n\r\n                value={basicDetails.state}\r\n\r\n                onChange={(e) =>\r\n\r\n                  setBasicDetails({ ...basicDetails, state: e.target.value })\r\n\r\n                }\r\n\r\n              />\r\n\r\n            </td>\r\n\r\n          </tr>\r\n\r\n          <tr>\r\n\r\n            <td>\r\n\r\n              <input\r\n\r\n                type=\"text\"\r\n\r\n                placeholder=\"Pincode\"\r\n\r\n                value={basicDetails.pincode}\r\n\r\n                onChange={(e) =>\r\n\r\n                  setBasicDetails({ ...basicDetails, pincode: e.target.value })\r\n\r\n                }\r\n\r\n              />\r\n\r\n            </td>\r\n\r\n            <td>\r\n\r\n              <input\r\n\r\n                type=\"text\"\r\n\r\n                placeholder=\"Alternate phone number\"\r\n\r\n                value={basicDetails.alternatePhoneNumber}\r\n\r\n                onChange={(e) =>\r\n\r\n                  setBasicDetails({\r\n\r\n                    ...basicDetails,\r\n\r\n                    alternatePhoneNumber: e.target.value,\r\n\r\n                  })\r\n\r\n                }\r\n\r\n              />\r\n\r\n            </td>\r\n\r\n          </tr>\r\n\r\n        </tbody>\r\n\r\n      </table>\r\n\r\n \r\n\r\n      <p className=\"Details-name\">X-Class Details:</p>\r\n\r\n      <table>\r\n\r\n        <tbody>\r\n\r\n          <tr>\r\n\r\n            <td>\r\n\r\n              <input\r\n\r\n                type=\"text\"\r\n\r\n                placeholder=\"School Name\"\r\n\r\n                value={xClassDetails.xschoolName}\r\n\r\n                onChange={(e) =>\r\n\r\n                  setXClassDetails({\r\n\r\n                    ...xClassDetails,\r\n\r\n                    xschoolName: e.target.value,\r\n\r\n                  })\r\n\r\n                }\r\n\r\n              />\r\n\r\n            </td>\r\n\r\n            <td>\r\n\r\n              <input\r\n\r\n                type=\"text\"\r\n\r\n                placeholder=\"Board\"\r\n\r\n                value={xClassDetails.xboard}\r\n\r\n                onChange={(e) =>\r\n\r\n                  setXClassDetails({ ...xClassDetails, xboard: e.target.value })\r\n\r\n                }\r\n\r\n              />\r\n\r\n            </td>\r\n\r\n          </tr>\r\n\r\n          <tr>\r\n\r\n            <td>\r\n\r\n              <input\r\n\r\n                type=\"text\"\r\n\r\n                placeholder=\"Percentage\"\r\n\r\n                value={xClassDetails.xpercentage}\r\n\r\n                onChange={(e) =>\r\n\r\n                  setXClassDetails({\r\n\r\n                    ...xClassDetails,\r\n\r\n                    xpercentage: e.target.value,\r\n\r\n                  })\r\n\r\n                }\r\n\r\n              />\r\n\r\n            </td>\r\n\r\n            <td>\r\n\r\n              <input\r\n\r\n                type=\"text\"\r\n\r\n                placeholder=\"Year of passing\"\r\n\r\n                value={xClassDetails.xyearOfPassing}\r\n\r\n                onChange={(e) =>\r\n\r\n                  setXClassDetails({\r\n\r\n                    ...xClassDetails,\r\n\r\n                    xyearOfPassing: e.target.value,\r\n\r\n                  })\r\n\r\n                }\r\n\r\n              />\r\n\r\n            </td>\r\n\r\n          </tr>\r\n\r\n          <tr>\r\n\r\n            <td>\r\n\r\n              <input\r\n\r\n                type=\"text\"\r\n\r\n                placeholder=\"City\"\r\n\r\n                value={xClassDetails.xCity}\r\n\r\n                onChange={(e) =>\r\n\r\n                  setXClassDetails({ ...xClassDetails, xCity: e.target.value })\r\n\r\n                }\r\n\r\n              />\r\n\r\n            </td>\r\n\r\n            <td>\r\n\r\n              <input\r\n\r\n                type=\"text\"\r\n\r\n                placeholder=\"State\"\r\n\r\n                value={xClassDetails.xState}\r\n\r\n                onChange={(e) =>\r\n\r\n                  setXClassDetails({ ...xClassDetails, xState: e.target.value })\r\n\r\n                }\r\n\r\n              />\r\n\r\n            </td>\r\n\r\n          </tr>\r\n\r\n          <tr>\r\n\r\n            <td>\r\n\r\n              <input\r\n\r\n                type=\"text\"\r\n\r\n                placeholder=\"Pincode\"\r\n\r\n                value={xClassDetails.xPincode}\r\n\r\n                onChange={(e) =>\r\n\r\n                  setXClassDetails({\r\n\r\n                    ...xClassDetails,\r\n\r\n                    xPincode: e.target.value,\r\n\r\n                  })\r\n\r\n                }\r\n\r\n              />\r\n\r\n            </td>\r\n\r\n          </tr>\r\n\r\n        </tbody>\r\n\r\n      </table>\r\n\r\n \r\n\r\n      <p className=\"Details-name\">Intermediate Details:</p>\r\n\r\n      <table>\r\n\r\n        <tbody>\r\n\r\n          <tr>\r\n\r\n            <td>\r\n\r\n              <input\r\n\r\n                type=\"text\"\r\n\r\n                placeholder=\"Name of college\"\r\n\r\n                value={intermediateDetails.icollegeName}\r\n\r\n                onChange={(e) =>\r\n\r\n                  setIntermediateDetails({\r\n\r\n                    ...intermediateDetails,\r\n\r\n                    icollegeName: e.target.value,\r\n\r\n                  })\r\n\r\n                }\r\n\r\n              />\r\n\r\n            </td>\r\n\r\n            <td>\r\n\r\n              <input\r\n\r\n                type=\"text\"\r\n\r\n                placeholder=\"Board\"\r\n\r\n                value={intermediateDetails.iboard}\r\n\r\n                onChange={(e) =>\r\n\r\n                  setIntermediateDetails({\r\n\r\n                    ...intermediateDetails,\r\n\r\n                    iboard: e.target.value,\r\n\r\n                  })\r\n\r\n                }\r\n\r\n              />\r\n\r\n            </td>\r\n\r\n          </tr>\r\n\r\n          <tr>\r\n\r\n            <td>\r\n\r\n              <input\r\n\r\n                type=\"text\"\r\n\r\n                placeholder=\"Program\"\r\n\r\n                value={intermediateDetails.iprogram}\r\n\r\n                onChange={(e) =>\r\n\r\n                  setIntermediateDetails({\r\n\r\n                    ...intermediateDetails,\r\n\r\n                    iprogram: e.target.value,\r\n\r\n                  })\r\n\r\n                }\r\n\r\n              />\r\n\r\n            </td>\r\n\r\n            <td>\r\n\r\n              <input\r\n\r\n                type=\"text\"\r\n\r\n                placeholder=\"Percentage\"\r\n\r\n                value={intermediateDetails.ipercentage}\r\n\r\n                onChange={(e) =>\r\n\r\n                  setIntermediateDetails({\r\n\r\n                    ...intermediateDetails,\r\n\r\n                    ipercentage: e.target.value,\r\n\r\n                  })\r\n\r\n                }\r\n\r\n              />\r\n\r\n            </td>\r\n\r\n          </tr>\r\n\r\n          <tr>\r\n\r\n            <td>\r\n\r\n              <input\r\n\r\n                type=\"text\"\r\n\r\n                placeholder=\"Year of passing\"\r\n\r\n                value={intermediateDetails.iyearOfPassing}\r\n\r\n                onChange={(e) =>\r\n\r\n                  setIntermediateDetails({\r\n\r\n                    ...intermediateDetails,\r\n\r\n                    iyearOfPassing: e.target.value,\r\n\r\n                  })\r\n\r\n                }\r\n\r\n              />\r\n\r\n            </td>\r\n\r\n            <td>\r\n\r\n              <input\r\n\r\n                type=\"text\"\r\n\r\n                placeholder=\"city\"\r\n\r\n                value={intermediateDetails.iCity}\r\n\r\n                onChange={(e) =>\r\n\r\n                  setIntermediateDetails({\r\n\r\n                    ...intermediateDetails,\r\n\r\n                    iCity: e.target.value,\r\n\r\n                  })\r\n\r\n                }\r\n\r\n              />\r\n\r\n            </td>\r\n\r\n          </tr>\r\n\r\n          <tr>\r\n\r\n            <td>\r\n\r\n              <input\r\n\r\n                type=\"text\"\r\n\r\n                placeholder=\"State\"\r\n\r\n                value={intermediateDetails.iState}\r\n\r\n                onChange={(e) =>\r\n\r\n                  setIntermediateDetails({\r\n\r\n                    ...intermediateDetails,\r\n\r\n                    iState: e.target.value,\r\n\r\n                  })\r\n\r\n                }\r\n\r\n              />\r\n\r\n            </td>\r\n\r\n          </tr>\r\n\r\n        </tbody>\r\n\r\n      </table>\r\n\r\n \r\n\r\n      <p className=\"Details-name\">Engineering Details:</p>\r\n\r\n      <table>\r\n\r\n        <tbody>\r\n\r\n          <tr>\r\n\r\n            <td>\r\n\r\n              <input\r\n\r\n                type=\"text\"\r\n\r\n                placeholder=\"Name of college\"\r\n\r\n                value={graduationDetails.gcollegeName}\r\n\r\n                onChange={(e) =>\r\n\r\n                  setGraduationDetails({\r\n\r\n                    ...graduationDetails,\r\n\r\n                    gcollegeName: e.target.value,\r\n\r\n                  })\r\n\r\n                }\r\n\r\n              />\r\n\r\n            </td>\r\n\r\n            <td>\r\n\r\n              <input\r\n\r\n                type=\"text\"\r\n\r\n                placeholder=\"Board\"\r\n\r\n                value={graduationDetails.gboard}\r\n\r\n                onChange={(e) =>\r\n\r\n                  setGraduationDetails({\r\n\r\n                    ...graduationDetails,\r\n\r\n                    gboard: e.target.value,\r\n\r\n                  })\r\n\r\n                }\r\n\r\n              />\r\n\r\n            </td>\r\n\r\n          </tr>\r\n\r\n          <tr>\r\n\r\n            <td>\r\n\r\n              <input\r\n\r\n                type=\"text\"\r\n\r\n                placeholder=\"Program\"\r\n\r\n                value={graduationDetails.gprogram}\r\n\r\n                onChange={(e) =>\r\n\r\n                  setGraduationDetails({\r\n\r\n                    ...graduationDetails,\r\n\r\n                    gprogram: e.target.value,\r\n\r\n                  })\r\n\r\n                }\r\n\r\n              />\r\n\r\n            </td>\r\n\r\n            <td>\r\n\r\n              <input\r\n\r\n                type=\"text\"\r\n\r\n                placeholder=\"Percentage\"\r\n\r\n                value={graduationDetails.gpercentage}\r\n\r\n                onChange={(e) =>\r\n\r\n                  setGraduationDetails({\r\n\r\n                    ...graduationDetails,\r\n\r\n                    gpercentage: e.target.value,\r\n\r\n                  })\r\n\r\n                }\r\n\r\n              />\r\n\r\n            </td>\r\n\r\n          </tr>\r\n\r\n          <tr>\r\n\r\n            <td>\r\n\r\n              <input\r\n\r\n                type=\"text\"\r\n\r\n                placeholder=\"Year of Passing\"\r\n\r\n                value={graduationDetails.gyearOfPassing}\r\n\r\n                onChange={(e) =>\r\n\r\n                  setGraduationDetails({\r\n\r\n                    ...graduationDetails,\r\n\r\n                    gyearOfPassing: e.target.value,\r\n\r\n                  })\r\n\r\n                }\r\n\r\n              />\r\n\r\n            </td>\r\n\r\n            <td>\r\n\r\n              <input\r\n\r\n                type=\"text\"\r\n\r\n                placeholder=\"City\"\r\n\r\n                value={graduationDetails.gCity}\r\n\r\n                onChange={(e) =>\r\n\r\n                  setGraduationDetails({\r\n\r\n                    ...graduationDetails,\r\n\r\n                    gCity: e.target.value,\r\n\r\n                  })\r\n\r\n                }\r\n\r\n              />\r\n\r\n            </td>\r\n\r\n          </tr>\r\n\r\n          <tr>\r\n\r\n            <td>\r\n\r\n              <input\r\n\r\n                type=\"text\"\r\n\r\n                placeholder=\"State\"\r\n\r\n                value={graduationDetails.GState}\r\n\r\n                onChange={(e) =>\r\n\r\n                  setGraduationDetails({\r\n\r\n                    ...graduationDetails,\r\n\r\n                    gState: e.target.value,\r\n\r\n                  })\r\n\r\n                }\r\n\r\n              />\r\n\r\n            </td>\r\n\r\n          </tr>\r\n\r\n        </tbody>\r\n\r\n      </table>\r\n\r\n     \r\n      <p className=\"Details-name\">Skills:</p>\r\n      <div className=\"skills-buttons\">\r\n  <button\r\n    className={`skill-button ${skills.includes(\"HTML\") ? \"active\" : \"\"}`} type=\"button\"\r\n    onClick={() => handleSkillSelect(\"HTML\")}\r\n  >\r\n    HTML\r\n  </button>\r\n  <button\r\n    className={`skill-button ${skills.includes(\"CSS\") ? \"active\" : \"\"}`} type=\"button\"\r\n    onClick={() => handleSkillSelect(\"CSS\")}\r\n  >\r\n    CSS\r\n  </button>\r\n  <button\r\n    className={`skill-button ${skills.includes(\"JavaScript\") ? \"active\" : \"\"}`} type=\"button\"\r\n    onClick={() => handleSkillSelect(\"JavaScript\")}\r\n  >\r\n    JavaScript\r\n  </button>\r\n  <button\r\n    className={`skill-button ${skills.includes(\"Java\") ? \"active\" : \"\"}`} type=\"button\"\r\n    onClick={() => handleSkillSelect(\"Java\")}\r\n  >\r\n    Java\r\n  </button>\r\n  <button\r\n    className={`skill-button ${skills.includes(\"Python\") ? \"active\" : \"\"}`} type=\"button\"\r\n    onClick={() => handleSkillSelect(\"Python\")}\r\n  >\r\n    Python\r\n  </button>\r\n  <button\r\n    className={`skill-button ${skills.includes(\"React\") ? \"active\" : \"\"}`} type=\"button\"\r\n    onClick={() => handleSkillSelect(\"React\")}\r\n  >\r\n    React\r\n  </button>\r\n  <button\r\n    className={`skill-button ${skills.includes(\"SQL\") ? \"active\" : \"\"}`} type=\"button\"\r\n    onClick={() => handleSkillSelect(\"SQL\")}\r\n  >\r\n    SQL\r\n  </button>\r\n  <button\r\n    className={`skill-button ${skills.includes(\"MongoDB\") ? \"active\" : \"\"}`} type=\"button\"\r\n    onClick={() => handleSkillSelect(\"MongoDB\")}\r\n  >\r\n    MongoDB\r\n  </button>\r\n  <button\r\n    className={`skill-button ${skills.includes(\"MySQL\") ? \"active\" : \"\"}`} type=\"button\"\r\n    onClick={() => handleSkillSelect(\"MySQL\")}\r\n  >\r\n    MySQL\r\n  </button>\r\n  <button\r\n    className={`skill-button ${skills.includes(\"Bootstrap\") ? \"active\" : \"\"}`} type=\"button\"\r\n    onClick={() => handleSkillSelect(\"Bootstrap\")}\r\n  >\r\n    Bootstrap\r\n  </button>\r\n  <button\r\n    className={`skill-button ${skills.includes(\"Vue.js\") ? \"active\" : \"\"}`} type=\"button\"\r\n    onClick={() => handleSkillSelect(\"Vue.js\")}\r\n  >\r\n    Vue.js\r\n  </button>\r\n  <button\r\n    className={`skill-button ${skills.includes(\"Angular\") ? \"active\" : \"\"}`} type=\"button\"\r\n    onClick={() => handleSkillSelect(\"Angular\")}\r\n  >\r\n    Angular\r\n  </button>\r\n  <button\r\n    className={`skill-button ${skills.includes(\"Flutter\") ? \"active\" : \"\"}`} type=\"button\"\r\n    onClick={() => handleSkillSelect(\"Flutter\")}\r\n  >\r\n    Flutter\r\n  </button>\r\n</div>\r\n\r\n {/* ...Previous Code... */}\r\n\r\n<p className=\"Details-name\">Experience Details:</p>\r\n\r\n{experienceDetails.map((experience, index) => (\r\n  <table key={index} className=\"experience-table\">\r\n    <tbody>\r\n      <tr>\r\n        <td>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Company\"\r\n            value={experience.company}\r\n            onChange={(e) => handleExperienceChange(e, index, \"company\")}\r\n          />\r\n        </td>\r\n        <td>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Position\"\r\n            value={experience.position}\r\n            onChange={(e) => handleExperienceChange(e, index, \"position\")}\r\n          />\r\n        </td>\r\n        <td>\r\n          <input\r\n            type=\"date\"\r\n            placeholder=\"Start Date\"\r\n            value={experience.startDate}\r\n            onChange={(e) => handleExperienceChange(e, index, \"startDate\")}\r\n          />\r\n        </td>\r\n        <td>\r\n          <input\r\n            type=\"date\"\r\n            placeholder=\"End Date\"\r\n            value={experience.endDate}\r\n            onChange={(e) => handleExperienceChange(e, index, \"endDate\")}\r\n          />\r\n        </td>\r\n        <td>\r\n        <button type=\"button\" onClick={addExperience}>Add Experience</button>\r\n        </td>\r\n      </tr>\r\n    </tbody>\r\n   \r\n  </table>\r\n  \r\n))}\r\n\r\n\r\n\r\n\r\n\r\n\r\n      <button type=\"submit\">Submit</button>\r\n\r\n  \r\n\r\n    </form>\r\n    \r\n    </div>\r\n\r\n  );\r\n\r\n};\r\n\r\n \r\n\r\nexport default Profile;",[],"C:\\Users\\Madar\\Desktop\\TalentTrackerFrontEnd\\src\\components\\RecurterRegister.js",["156"],[],"import React, { useState } from 'react';\r\nimport OTPVerification from './OTPVerification';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport '../css/RegistrationForm.css';\r\n\r\nconst RecruiterRegister = () => {\r\n  const [otpSent, setOTPSent] = useState(false);\r\n  const [otpVerified, setOTPVerified] = useState(false);\r\n  const [companyid, setCompanyid] = useState('');\r\n  const [companyname, setCompanyname] = useState('');\r\n  const [typeofcompany, setTypeofcompany] = useState('');\r\n  const [yourRole, setYourRole] = useState('');\r\n  const [employeeCount, setEmployeeCount] = useState('');\r\n  const [email, setEmail] = useState('');\r\n  const [mobilenumber, setMobilenumber] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [confirmPassword, setConfirmPassword] = useState('');\r\n  const [errorMessage, setErrorMessage] = useState('');\r\n  const [registrationSuccess, setRegistrationSuccess] = useState(false);\r\n  const navigate = useNavigate();\r\n  const [registrationInProgress, setRegistrationInProgress] = useState(false);\r\n  const [otpSendingInProgress, setOTPSendingInProgress] = useState(false); // New state variable for sending OTP\r\n  const [otpVerifyingInProgress, setOTPVerifyingInProgress] = useState(false); // New state variable for verifying OTP \r\n  const apiUrl = process.env.REACT_APP_API_BASE_URL;\r\n\r\n  const handleSendOTP = async () => {\r\n    try {\r\n      setOTPSendingInProgress(true); // Set sending OTP in progress\r\n      await axios.post(`${apiUrl}/send-otp`, { email });\r\n      setOTPSent(true);\r\n      setOTPSendingInProgress(false); // Clear sending OTP in progress\r\n    } catch (error) {\r\n      console.error('Error sending OTP:', error);\r\n      setOTPSendingInProgress(false); // Clear sending OTP in progress in case of error\r\n    }\r\n  };\r\n\r\n  const isPasswordValid = (password) => {\r\n    // Password must be at least 6 characters long\r\n    if (password.length < 6) {\r\n      return false;\r\n    }\r\n  \r\n    // Password must contain at least one uppercase letter\r\n    if (!/[A-Z]/.test(password)) {\r\n      return false;\r\n    }\r\n  \r\n    // Password must contain at least one special character (non-alphanumeric)\r\n    if (!/[^A-Za-z0-9]/.test(password)) {\r\n      return false;\r\n    }\r\n  \r\n    // Password cannot contain spaces\r\n    if (/\\s/.test(password)) {\r\n      return false;\r\n    }\r\n  \r\n    return true;\r\n  };\r\n  const isEmailValid = (email) => {\r\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n    return emailRegex.test(email);\r\n  };\r\n  const isMobileNumberValid = (mobilenumber) => {\r\n    // Mobile number must contain only numeric digits\r\n    if (!/^\\d+$/.test(mobilenumber)) {\r\n      return false;\r\n    }\r\n\r\n    // Mobile number must have a specific length (e.g., 10 digits)\r\n    if (mobilenumber.length !== 10) {\r\n      return false;\r\n    }\r\n\r\n    const firstDigit = mobilenumber.charAt(0);\r\n  if (!['6', '7', '8', '9'].includes(firstDigit)) {\r\n    return false;\r\n  }\r\n    return true;\r\n  };\r\n\r\n  const isFormValid = () => {\r\n    if (!isEmailValid(email)) {\r\n      setErrorMessage('Please enter a valid email address.');\r\n      return false;\r\n    }\r\n    if (!isMobileNumberValid(mobilenumber)) {\r\n      setErrorMessage('Please enter a valid 10-digit mobile number & should begin with 6 or 7 or 8 or 9.');\r\n      return false;\r\n    }\r\n    if (!isPasswordValid(password)) {\r\n      setErrorMessage('Password must be at least 6 characters long and should have one cpital letter and one small letter and no spaces are allowed.');\r\n      return false;\r\n    }\r\n    \r\n    if (password !== confirmPassword) {\r\n      setErrorMessage('Passwords do not match.');\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n    \r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    if (!isFormValid()) {\r\n      return; // Do not proceed with registration if form is invalid\r\n    }\r\n\r\n    try {\r\n      setRegistrationInProgress(true);\r\n      const response = await axios.post(`${apiUrl}/EmpRegister`, {\r\n        \r\n        companyid,\r\n        companyname,\r\n        typeofcompany,\r\n        yourRole,\r\n        employeeCount,\r\n        mobilenumber,\r\n        email,\r\n        password,\r\n      });\r\n\r\n      setErrorMessage('');\r\n      setRegistrationSuccess(true);\r\n\r\n      console.log('Registration successful', response.data);\r\n      \r\n      setRegistrationInProgress(false);\r\n      if (otpSent && otpVerified) {\r\n          \r\n          navigate('/employerlogin', { state: { registrationSuccess: true } });\r\n      }\r\n    } catch (error) {\r\n      setErrorMessage('Registration failed. Please try again later.');\r\n      window.alert('Registration failed! User with this email already exists.');\r\n      console.error('Registration failed', error);\r\n    }\r\n  };\r\n\r\n  \r\n\r\n  return (\r\n    <div className=\"registration-form-container\">\r\n      <form className=\"registration-form\" onSubmit={handleSubmit}>\r\n        <h2>Recruiter Register</h2>\r\n        {errorMessage && <div className=\"error-message\">{errorMessage}</div>}\r\n        \r\n        \r\n        <div className=\"form-group\">\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Company ID\"\r\n            value={companyid}\r\n            onChange={(e) => setCompanyid(e.target.value)}\r\n          />\r\n          <div className=\"helpful-line\">Enter your company ID</div>\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Company Name\"\r\n            value={companyname}\r\n            onChange={(e) => setCompanyname(e.target.value)}\r\n          />\r\n          <div className=\"helpful-line\">Enter your company name</div>\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Type of Company\"\r\n            value={typeofcompany}\r\n            onChange={(e) => setTypeofcompany(e.target.value)}\r\n          />\r\n          <div className=\"helpful-line\">Enter the type of your company</div>\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <select value={yourRole} onChange={(e) => setYourRole(e.target.value)}>\r\n            <option value=\"\">Select Your Role</option>\r\n            <option value=\"Hiring Manager\">Hiring Manager</option>\r\n            <option value=\"Company Recruiter\">Company Recruiter</option>\r\n            <option value=\"Technical Recruiter\">Technical Recruiter</option>\r\n            <option value=\"Others\">Others</option>\r\n          </select>\r\n          <div className=\"helpful-line\">Select your role from the options</div>\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <select value={employeeCount} onChange={(e) => setEmployeeCount(e.target.value)}>\r\n            <option value=\"\">Select Employee Count</option>\r\n            <option value=\"5 to 10 Employees\">5 to 10 Employees</option>\r\n            <option value=\"10 to 50 Employees\">10 to 50 Employees</option>\r\n            <option value=\"50 to 200 Employees\">50 to 200 Employees</option>\r\n            <option value=\"200+ Employees\">200+ Employees</option>\r\n          </select>\r\n          <div className=\"helpful-line\">Select your company's employee count from the options</div>\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <input\r\n            type=\"email\"\r\n            placeholder=\"Email\"\r\n            value={email}\r\n            onChange={(e) => setEmail(e.target.value)}\r\n          />\r\n          {/* Helpful line */}\r\n          <div className=\"helpful-line\">Enter your email address</div>\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Mobile Number\"\r\n            value={mobilenumber}\r\n            onChange={(e) => setMobilenumber(e.target.value)}\r\n          />\r\n          {/* Helpful line */}\r\n          <div className=\"helpful-line\">Enter your 10-digit mobile number and mobile number should begin with 6 or 7 or 8 or 9</div>\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <input\r\n            type=\"password\"\r\n            placeholder=\"Password\"\r\n            value={password}\r\n            onChange={(e) => setPassword(e.target.value)}\r\n          />\r\n          {/* Helpful line */}\r\n          <div className=\"helpful-line\">\r\n          Password must be at least 6 characters long, contain one uppercase letter, one lowercase letter, one number, one special character, and no spaces.\r\n          </div>\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <input\r\n            type=\"password\"\r\n            placeholder=\"Confirm Password\"\r\n            value={confirmPassword}\r\n            onChange={(e) => setConfirmPassword(e.target.value)}\r\n          />\r\n          {/* Helpful line */}\r\n          <div className=\"helpful-line\">Re-enter your password to confirm</div>\r\n        </div>\r\n        {/* Rest of the code remains the same */}\r\n         {/* Include the PdfUpload component here */}\r\n        \r\n         {otpSent && !otpVerified ? (\r\n  <div>\r\n    <p style={{ color: 'green' }}>OTP sent to your email. Please check and enter below:</p>\r\n    <OTPVerification\r\n            email={email}\r\n            onOTPVerified={() => setOTPVerified(true)}\r\n            otpVerifyingInProgress={otpVerifyingInProgress}\r\n            setOTPVerifyingInProgress={setOTPVerifyingInProgress}\r\n          />\r\n    <button\r\n      type=\"button\"\r\n      onClick={handleSendOTP}\r\n      disabled={otpSent || registrationInProgress || otpSendingInProgress}\r\n    >\r\n      {otpSendingInProgress ? (\r\n        \r\n        <div className=\"spinner\"></div>\r\n       \r\n      ) : (\r\n        <div></div>\r\n      )}\r\n    </button>\r\n  </div>\r\n) : (\r\n  <div>\r\n    {otpVerified ? (\r\n      <div style={{ color: 'green' }}>\r\n        <p>OTP verified successfully! Click on Register to proceed</p>\r\n      </div>\r\n    ) : (\r\n      <div>\r\n        <div className=\"helpful-line\">Click on send OTP to verify your email</div>\r\n        <button\r\n          type=\"button\"\r\n          onClick={handleSendOTP}\r\n          disabled={otpSent || registrationInProgress || otpSendingInProgress}\r\n        >\r\n          {otpSendingInProgress ? (\r\n             <div className=\"status-container\">\r\n             <div className=\"spinner\"></div>\r\n             <div className=\"status-text\">Sending OTP</div>\r\n           </div>\r\n          ) : (\r\n            'Send OTP'\r\n          )}\r\n        </button>\r\n      </div>\r\n    )}\r\n  </div>\r\n)}\r\n\r\n{otpVerified && (\r\n  <button type=\"submit\">\r\n    {registrationInProgress ? (\r\n       <div className=\"status-container\">\r\n       <div className=\"spinner\"></div>\r\n       <div className=\"status-text\">Registering</div>\r\n     </div>\r\n    ) : (\r\n      'Register'\r\n    )}\r\n  </button>\r\n)}\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RecruiterRegister;\r\n",[],"C:\\Users\\Madar\\Desktop\\TalentTrackerFrontEnd\\src\\components\\EmployerLogin.js",["157","158"],[],"import React, { useState } from 'react';\r\nimport { useNavigate, useLocation } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport '../css/LoginForm.css';\r\nimport { Link } from 'react-router-dom';\r\nimport { useUserContext } from './UserProvider';\r\n\r\n\r\nconst EmployerLogin = ({ handleLogin }) => {\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [errorMessage, setErrorMessage] = useState('');\r\n  const location = useLocation();\r\n  const registrationSuccess = location.state?.registrationSuccess;\r\n  const navigate = useNavigate();\r\n  const apiUrl = process.env.REACT_APP_API_BASE_URL;\r\n  const { setUser } = useUserContext();\r\n  const { setUserType } = useUserContext();\r\n \r\n\r\n  const isFormValid = () => {\r\n    if (!email.trim() || !password.trim()) {\r\n      return false; // Username and password should not be empty or whitespace only\r\n    }\r\n    return true;\r\n  };\r\n  // Helper function to set JWT token in localStorage\r\n  const setJwtToken = (token) => {\r\n    localStorage.setItem('jwtToken', token);\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    if (!isFormValid()) {\r\n      window.alert('Please enter both username and password.');\r\n      return;\r\n    }\r\n    try {\r\n\r\n      let loginEndpoint;\r\n      let count;\r\n    if (email === 'admin' && password === 'admin') {\r\n       count=0;\r\n      loginEndpoint = `${apiUrl}/adminlogin`; // Admin login endpoint\r\n    } else {\r\n      count=1;\r\n      loginEndpoint = `${apiUrl}/empLogin`; // User login endpoint\r\n    }\r\n      // Replace 'http://localhost:5000' with your actual Spring Boot backend URL\r\n      console.log('Email:', email);\r\n      const response = await axios.post(loginEndpoint, {\r\n        email,\r\n        password,\r\n         // Include the selected role in the request\r\n      });\r\n\r\n      if (response.status === 200) {\r\n        // Assuming the response.data contains user data\r\n        const userData = response.data;\r\n        console.log('this is response ',userData.token);\r\n        localStorage.setItem('jwtToken', userData.token);\r\n        // Access and store the JWT token from the Authorization header\r\n        const jwtToken = response.headers.authorization;\r\n        localStorage.setItem('userType', userData.userType);\r\n\r\n      \r\n        // Set JWT token in localStorage\r\n        //setJwtToken(jwtToken);\r\n\r\n        setErrorMessage('');\r\n        handleLogin();\r\n\r\n        // Set user data in the context\r\n        setUser(userData);\r\n        setUserType(userData.userType);\r\n        console.log('Login successful', userData);\r\n\r\n        if (count === 0) {\r\n          navigate('/admin');\r\n        } else {\r\n          navigate('/employer');\r\n        }\r\n\r\n        // You can now use `jwtToken` for making authenticated requests.\r\n        //console.log('JWT Token:', jwtToken);\r\n      } \r\n      else {\r\n        setErrorMessage('Login failed. Please check your user name and password.');\r\n        console.error('Login failed');\r\n      }\r\n    }catch (error) {\r\n      setErrorMessage('Login failed. Please check your user name and password.');\r\n      console.error('Login failed', error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"login-form-container\">\r\n      <form className=\"login-form\" onSubmit={handleSubmit}>\r\n        {registrationSuccess && (\r\n          <div className=\"success-message\">\r\n            Registration successful! Please log in to continue.\r\n          </div>\r\n        )}\r\n        <h2>Login</h2>\r\n        <div className=\"form-group\">\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Enter your Email\"\r\n            value={email}\r\n            onChange={(e) => setEmail(e.target.value)}\r\n          />\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <input\r\n            type=\"password\"\r\n            placeholder=\"Password\"\r\n            value={password}\r\n            onChange={(e) => setPassword(e.target.value)}\r\n          />\r\n        </div>\r\n        <Link to=\"/forgot-password-employer\" className=\"forgot-password-link\">\r\n          Forgot Password\r\n        </Link>\r\n        <button type=\"submit\">Login</button>\r\n        \r\n        {errorMessage && <div className=\"error-message\">{errorMessage}</div>}\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EmployerLogin;\r\n","C:\\Users\\Madar\\Desktop\\TalentTrackerFrontEnd\\src\\components\\EmployerHome.js",[],[],"C:\\Users\\Madar\\Desktop\\TalentTrackerFrontEnd\\src\\components\\ForgotPassword.js",["159"],[],"C:\\Users\\Madar\\Desktop\\TalentTrackerFrontEnd\\src\\components\\JobDetailPage.js",[],[],"C:\\Users\\Madar\\Desktop\\TalentTrackerFrontEnd\\src\\components\\EmployerForgotPassword.js",["160"],[],"C:\\Users\\Madar\\Desktop\\TalentTrackerFrontEnd\\src\\components\\UserProvider.js",[],[],"C:\\Users\\Madar\\Desktop\\TalentTrackerFrontEnd\\src\\components\\OTPVerification.js",["161"],[],"C:\\Users\\Madar\\Desktop\\TalentTrackerFrontEnd\\src\\components\\Sidebar.js",["162","163"],[],"C:\\Users\\Madar\\Desktop\\TalentTrackerFrontEnd\\src\\components\\JobsList.js",[],[],"C:\\Users\\Madar\\Desktop\\TalentTrackerFrontEnd\\src\\components\\Jobs.js",[],[],"C:\\Users\\Madar\\Desktop\\TalentTrackerFrontEnd\\src\\components\\UserTable.js",[],[],"C:\\Users\\Madar\\Desktop\\TalentTrackerFrontEnd\\src\\components\\CustomJobCard.js",[],[],{"ruleId":"164","severity":1,"message":"165","line":23,"column":10,"nodeType":"166","messageId":"167","endLine":23,"endColumn":18},{"ruleId":"164","severity":1,"message":"168","line":23,"column":20,"nodeType":"166","messageId":"167","endLine":23,"endColumn":31},{"ruleId":"164","severity":1,"message":"169","line":25,"column":9,"nodeType":"166","messageId":"167","endLine":25,"endColumn":13},{"ruleId":"164","severity":1,"message":"170","line":3,"column":10,"nodeType":"166","messageId":"167","endLine":3,"endColumn":20},{"ruleId":"164","severity":1,"message":"171","line":4,"column":10,"nodeType":"166","messageId":"167","endLine":4,"endColumn":25},{"ruleId":"164","severity":1,"message":"172","line":5,"column":10,"nodeType":"166","messageId":"167","endLine":5,"endColumn":21},{"ruleId":"164","severity":1,"message":"173","line":18,"column":10,"nodeType":"166","messageId":"167","endLine":18,"endColumn":29},{"ruleId":"164","severity":1,"message":"174","line":5,"column":8,"nodeType":"166","messageId":"167","endLine":5,"endColumn":22},{"ruleId":"164","severity":1,"message":"175","line":28,"column":9,"nodeType":"166","messageId":"167","endLine":28,"endColumn":20},{"ruleId":"164","severity":1,"message":"176","line":63,"column":15,"nodeType":"166","messageId":"167","endLine":63,"endColumn":23},{"ruleId":"164","severity":1,"message":"177","line":32,"column":10,"nodeType":"166","messageId":"167","endLine":32,"endColumn":21},{"ruleId":"164","severity":1,"message":"178","line":32,"column":23,"nodeType":"166","messageId":"167","endLine":32,"endColumn":37},{"ruleId":"179","severity":1,"message":"180","line":21,"column":6,"nodeType":"181","endLine":21,"endColumn":8,"suggestions":"182"},{"ruleId":"164","severity":1,"message":"183","line":108,"column":10,"nodeType":"166","messageId":"167","endLine":108,"endColumn":20},{"ruleId":"164","severity":1,"message":"184","line":111,"column":10,"nodeType":"166","messageId":"167","endLine":111,"endColumn":23},{"ruleId":"164","severity":1,"message":"185","line":111,"column":25,"nodeType":"166","messageId":"167","endLine":111,"endColumn":41},{"ruleId":"186","severity":1,"message":"187","line":168,"column":11,"nodeType":"188","messageId":"189","endLine":168,"endColumn":30},{"ruleId":"164","severity":1,"message":"173","line":20,"column":10,"nodeType":"166","messageId":"167","endLine":20,"endColumn":29},{"ruleId":"164","severity":1,"message":"175","line":28,"column":9,"nodeType":"166","messageId":"167","endLine":28,"endColumn":20},{"ruleId":"164","severity":1,"message":"176","line":63,"column":15,"nodeType":"166","messageId":"167","endLine":63,"endColumn":23},{"ruleId":"164","severity":1,"message":"190","line":14,"column":10,"nodeType":"166","messageId":"167","endLine":14,"endColumn":25},{"ruleId":"164","severity":1,"message":"190","line":14,"column":10,"nodeType":"166","messageId":"167","endLine":14,"endColumn":25},{"ruleId":"179","severity":1,"message":"191","line":34,"column":6,"nodeType":"181","endLine":34,"endColumn":19,"suggestions":"192"},{"ruleId":"164","severity":1,"message":"193","line":2,"column":10,"nodeType":"166","messageId":"167","endLine":2,"endColumn":14},{"ruleId":"164","severity":1,"message":"194","line":5,"column":10,"nodeType":"166","messageId":"167","endLine":5,"endColumn":16},"no-unused-vars","'userType' is assigned a value but never used.","Identifier","unusedVar","'setUserType' is assigned a value but never used.","'jobs' is assigned a value but never used.","'faUserPlus' is defined but never used.","'FontAwesomeIcon' is defined but never used.","'faSignInAlt' is defined but never used.","'registrationSuccess' is assigned a value but never used.","'ForgotPassword' is defined but never used.","'setJwtToken' is assigned a value but never used.","'jwtToken' is assigned a value but never used.","'selectedJob' is assigned a value but never used.","'setSelectedJob' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'setUserType'. Either include it or remove the dependency array.","ArrayExpression",["195"],"'resumeFile' is assigned a value but never used.","'selectedSkill' is assigned a value but never used.","'setSelectedSkill' is assigned a value but never used.","no-cond-assign","Expected a conditional expression and instead saw an assignment.","AssignmentExpression","missing","'isPasswordValid' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'setOTPVerifyingInProgress'. Either include it or remove the dependency array. If 'setOTPVerifyingInProgress' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["196"],"'Link' is defined but never used.","'faUser' is defined but never used.",{"desc":"197","fix":"198"},{"desc":"199","fix":"200"},"Update the dependencies array to be: [setUserType]",{"range":"201","text":"202"},"Update the dependencies array to be: [otpVerified, setOTPVerifyingInProgress]",{"range":"203","text":"204"},[741,743],"[setUserType]",[1475,1488],"[otpVerified, setOTPVerifyingInProgress]"]