[{"C:\\Users\\Madar\\Desktop\\TalentTrackerFrontEnd\\src\\index.js":"1","C:\\Users\\Madar\\Desktop\\TalentTrackerFrontEnd\\src\\App.js":"2","C:\\Users\\Madar\\Desktop\\TalentTrackerFrontEnd\\src\\reportWebVitals.js":"3","C:\\Users\\Madar\\Desktop\\TalentTrackerFrontEnd\\src\\components\\Register.js":"4","C:\\Users\\Madar\\Desktop\\TalentTrackerFrontEnd\\src\\components\\Login.js":"5","C:\\Users\\Madar\\Desktop\\TalentTrackerFrontEnd\\src\\components\\HomePage.js":"6","C:\\Users\\Madar\\Desktop\\TalentTrackerFrontEnd\\src\\components\\UserHome.js":"7","C:\\Users\\Madar\\Desktop\\TalentTrackerFrontEnd\\src\\components\\About.js":"8","C:\\Users\\Madar\\Desktop\\TalentTrackerFrontEnd\\src\\components\\Admin.js":"9","C:\\Users\\Madar\\Desktop\\TalentTrackerFrontEnd\\src\\components\\EmployerHome.js":"10","C:\\Users\\Madar\\Desktop\\TalentTrackerFrontEnd\\src\\components\\ForgotPassword.js":"11","C:\\Users\\Madar\\Desktop\\TalentTrackerFrontEnd\\src\\components\\RecurterRegister.js":"12","C:\\Users\\Madar\\Desktop\\TalentTrackerFrontEnd\\src\\components\\Navbar.js":"13","C:\\Users\\Madar\\Desktop\\TalentTrackerFrontEnd\\src\\components\\Footer.js":"14","C:\\Users\\Madar\\Desktop\\TalentTrackerFrontEnd\\src\\components\\Profile.js":"15","C:\\Users\\Madar\\Desktop\\TalentTrackerFrontEnd\\src\\components\\JobDescription.js":"16","C:\\Users\\Madar\\Desktop\\TalentTrackerFrontEnd\\src\\components\\EmployerLogin.js":"17","C:\\Users\\Madar\\Desktop\\TalentTrackerFrontEnd\\src\\components\\UserTable.js":"18","C:\\Users\\Madar\\Desktop\\TalentTrackerFrontEnd\\src\\components\\OTPVerification.js":"19","C:\\Users\\Madar\\Desktop\\TalentTrackerFrontEnd\\src\\components\\Sidebar.js":"20","C:\\Users\\Madar\\Desktop\\TalentTrackerFrontEnd\\src\\components\\JobCard.js":"21","C:\\Users\\Madar\\Desktop\\TalentTrackerFrontEnd\\src\\components\\UserProvider.js":"22","C:\\Users\\Madar\\Desktop\\TalentTrackerFrontEnd\\src\\components\\EmployerForgotPassword.js":"23"},{"size":535,"mtime":1690786628175,"results":"24","hashOfConfig":"25"},{"size":2842,"mtime":1693564301348,"results":"26","hashOfConfig":"25"},{"size":362,"mtime":1690786628384,"results":"27","hashOfConfig":"25"},{"size":9136,"mtime":1693043695320,"results":"28","hashOfConfig":"25"},{"size":3187,"mtime":1693498560281,"results":"29","hashOfConfig":"25"},{"size":1225,"mtime":1692278992235,"results":"30","hashOfConfig":"25"},{"size":1270,"mtime":1693411245678,"results":"31","hashOfConfig":"25"},{"size":1009,"mtime":1691048103469,"results":"32","hashOfConfig":"25"},{"size":332,"mtime":1691056626154,"results":"33","hashOfConfig":"25"},{"size":592,"mtime":1692352007717,"results":"34","hashOfConfig":"25"},{"size":6107,"mtime":1693560824664,"results":"35","hashOfConfig":"25"},{"size":10702,"mtime":1693044199171,"results":"36","hashOfConfig":"25"},{"size":2061,"mtime":1693043923992,"results":"37","hashOfConfig":"25"},{"size":1731,"mtime":1691057906706,"results":"38","hashOfConfig":"25"},{"size":21867,"mtime":1693497339409,"results":"39","hashOfConfig":"25"},{"size":1178,"mtime":1693411880439,"results":"40","hashOfConfig":"25"},{"size":3283,"mtime":1693564076300,"results":"41","hashOfConfig":"25"},{"size":739,"mtime":1692351972436,"results":"42","hashOfConfig":"25"},{"size":1914,"mtime":1693038573934,"results":"43","hashOfConfig":"25"},{"size":1512,"mtime":1693500054797,"results":"44","hashOfConfig":"25"},{"size":2554,"mtime":1693543001544,"results":"45","hashOfConfig":"25"},{"size":933,"mtime":1693499518866,"results":"46","hashOfConfig":"25"},{"size":6126,"mtime":1693564382447,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"yb9s98",{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61"},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65"},{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69"},{"filePath":"70","messages":"71","suppressedMessages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","suppressedMessages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","suppressedMessages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","suppressedMessages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","suppressedMessages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"54"},{"filePath":"86","messages":"87","suppressedMessages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89"},{"filePath":"90","messages":"91","suppressedMessages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93"},{"filePath":"94","messages":"95","suppressedMessages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","suppressedMessages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"101"},{"filePath":"102","messages":"103","suppressedMessages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"105","messages":"106","suppressedMessages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"108","messages":"109","suppressedMessages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"111","messages":"112","suppressedMessages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114"},{"filePath":"115","messages":"116","suppressedMessages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"119"},{"filePath":"120","messages":"121","suppressedMessages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"123","messages":"124","suppressedMessages":"125","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"126","messages":"127","suppressedMessages":"128","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129"},"C:\\Users\\Madar\\Desktop\\TalentTrackerFrontEnd\\src\\index.js",[],[],"C:\\Users\\Madar\\Desktop\\TalentTrackerFrontEnd\\src\\App.js",[],[],[],"C:\\Users\\Madar\\Desktop\\TalentTrackerFrontEnd\\src\\reportWebVitals.js",[],[],"C:\\Users\\Madar\\Desktop\\TalentTrackerFrontEnd\\src\\components\\Register.js",["130"],[],"import React, { useState } from 'react';\r\nimport OTPVerification from './OTPVerification';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport '../css/RegistrationForm.css';\r\nimport axios from 'axios';\r\n\r\n\r\nconst Register = () => {\r\n\r\n  const [otpSent, setOTPSent] = useState(false); // Track whether OTP is sent\r\n  const [otpVerified, setOTPVerified] = useState(false);\r\n  const [name, setName] = useState('');\r\n  const [email, setEmail] = useState('');\r\n  const [mobilenumber, setMobilenumber] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [confirmPassword, setConfirmPassword] = useState('');\r\n  const [errorMessage, setErrorMessage] = useState('');\r\n  const [registrationSuccess, setRegistrationSuccess] = useState(false); // New state variable\r\n  const navigate = useNavigate();\r\n  const [registrationInProgress, setRegistrationInProgress] = useState(false);\r\n  const [otpSendingInProgress, setOTPSendingInProgress] = useState(false); // New state variable for sending OTP\r\n  const [otpVerifyingInProgress, setOTPVerifyingInProgress] = useState(false); // New state variable for verifying OTP \r\n  const apiUrl = process.env.REACT_APP_API_BASE_URL;\r\n\r\n\r\n  \r\n\r\n  const handleSendOTP = async () => {\r\n    try {\r\n      setOTPSendingInProgress(true); // Set sending OTP in progress\r\n      await axios.post(`${apiUrl}/send-otp`, { email });\r\n      setOTPSent(true);\r\n      setOTPSendingInProgress(false); // Clear sending OTP in progress\r\n    } catch (error) {\r\n      console.error('Error sending OTP:', error);\r\n      setOTPSendingInProgress(false); // Clear sending OTP in progress in case of error\r\n    }\r\n  };\r\n  const isEmailValid = (email) => {\r\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n    return emailRegex.test(email);\r\n  };\r\n\r\n  const isPasswordValid = (password) => {\r\n    // Password must be at least 6 characters long\r\n    if (password.length < 6) {\r\n      return false;\r\n    }\r\n  \r\n    // Password must contain at least one uppercase letter\r\n    if (!/[A-Z]/.test(password)) {\r\n      return false;\r\n    }\r\n  \r\n    // Password must contain at least one special character (non-alphanumeric)\r\n    if (!/[^A-Za-z0-9]/.test(password)) {\r\n      return false;\r\n    }\r\n  \r\n    // Password cannot contain spaces\r\n    if (/\\s/.test(password)) {\r\n      return false;\r\n    }\r\n  \r\n    return true;\r\n  };\r\n  \r\n  const isMobileNumberValid = (mobilenumber) => {\r\n    // Mobile number must contain only numeric digits\r\n    if (!/^\\d+$/.test(mobilenumber)) {\r\n      return false;\r\n    }\r\n\r\n    // Mobile number must have a specific length (e.g., 10 digits)\r\n    if (mobilenumber.length !== 10) {\r\n      return false;\r\n    }\r\n\r\n    const firstDigit = mobilenumber.charAt(0);\r\n  if (!['6', '7', '8', '9'].includes(firstDigit)) {\r\n    return false;\r\n  }\r\n    return true;\r\n  };\r\n  const isFormValid = () => {\r\n    if (!isEmailValid(email)) {\r\n      setErrorMessage('Please enter a valid email address.');\r\n      return false;\r\n    }\r\n    if (!isMobileNumberValid(mobilenumber)) {\r\n      setErrorMessage('Please enter a valid 10-digit mobile number & should begin with 6 or 7 or 8 or 9.');\r\n      return false;\r\n    }\r\n    if (!isPasswordValid(password)) {\r\n      setErrorMessage('Password must be at least 6 characters long and should have one cpital letter and one small letter and no spaces are allowed.');\r\n      return false;\r\n    }\r\n    \r\n    if (password !== confirmPassword) {\r\n      setErrorMessage('Passwords do not match.');\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n    \r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    if (!isFormValid()) {\r\n      return; // Do not proceed with registration if form is invalid\r\n    }\r\n\r\n    try {\r\n      setRegistrationInProgress(true);\r\n      // Send the form data to the backend server using Axios POST request\r\n      const response = await axios.post(`${apiUrl}/register`, {\r\n        name,\r\n        email,\r\n        mobilenumber,\r\n        password,\r\n        confirmPassword,\r\n      });\r\n\r\n      // Clear any previous error messages if the registration is successful\r\n      // If OTP is sent, render OTPVerification component\r\n      \r\n      setErrorMessage('');\r\n      setRegistrationSuccess(true);\r\n\r\n      \r\n      // Handle the response from the server (e.g., show a success message)\r\n      console.log('Registration successful', response.data);\r\n      // Show a window alert for successful registration\r\n      setName('');\r\n      setEmail('');\r\n      setMobilenumber('');\r\n      setPassword('');\r\n      setConfirmPassword('');\r\n      setRegistrationInProgress(false);\r\n\r\n      // Use the navigate function to navigate to the home screen\r\n      if (otpSent && otpVerified) {\r\n        navigate('/login', { state: { registrationSuccess: true } });\r\n      }\r\n    } catch (error) {\r\n      // Handle registration errors (e.g., show an error message)\r\n      setErrorMessage('Registration failed. Please try again later.');\r\n      setRegistrationInProgress(false);\r\n      window.alert('Registration failed! user with this email already exist');\r\n      console.error('Registration failed', error);\r\n    }\r\n  };\r\n\r\n  \r\n  return (\r\n    <div className=\"registration-form-container\">\r\n      <form className=\"registration-form\" onSubmit={handleSubmit}>\r\n        <h2>Register</h2>\r\n        {errorMessage && <div className=\"error-message\">{errorMessage}</div>}\r\n        <div className=\"form-group\">\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Name\"\r\n            value={name}\r\n            onChange={(e) => setName(e.target.value)}\r\n          />\r\n          {/* Helpful line */}\r\n          <div className=\"helpful-line\">Enter your full name</div>\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <input\r\n            type=\"email\"\r\n            placeholder=\"Email\"\r\n            value={email}\r\n            onChange={(e) => setEmail(e.target.value)}\r\n          />\r\n          {/* Helpful line */}\r\n          <div className=\"helpful-line\">Enter your email address</div>\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Mobile Number\"\r\n            value={mobilenumber}\r\n            onChange={(e) => setMobilenumber(e.target.value)}\r\n          />\r\n          {/* Helpful line */}\r\n          <div className=\"helpful-line\">Enter your 10-digit mobile number and mobile number should begin with 6 or 7 or 8 or 9</div>\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <input\r\n            type=\"password\"\r\n            placeholder=\"Password\"\r\n            value={password}\r\n            onChange={(e) => setPassword(e.target.value)}\r\n          />\r\n          {/* Helpful line */}\r\n          <div className=\"helpful-line\">\r\n          Password must be at least 6 characters long, contain one uppercase letter, one lowercase letter, one number, one special character, and no spaces.\r\n          </div>\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <input\r\n            type=\"password\"\r\n            placeholder=\"Confirm Password\"\r\n            value={confirmPassword}\r\n            onChange={(e) => setConfirmPassword(e.target.value)}\r\n          />\r\n          {/* Helpful line */}\r\n          <div className=\"helpful-line\">Re-enter your password to confirm</div>\r\n        </div>\r\n        \r\n        {otpSent && !otpVerified ? (\r\n  <div>\r\n    <p style={{ color: 'green' }}>OTP sent to your email. Please check and enter below:</p>\r\n    <OTPVerification\r\n            email={email}\r\n            onOTPVerified={() => setOTPVerified(true)}\r\n            otpVerifyingInProgress={otpVerifyingInProgress}\r\n            setOTPVerifyingInProgress={setOTPVerifyingInProgress}\r\n          />\r\n    <button\r\n      type=\"button\"\r\n      onClick={handleSendOTP}\r\n      disabled={otpSent || registrationInProgress || otpSendingInProgress}\r\n    >\r\n      {otpSendingInProgress ? (\r\n        \r\n        <div className=\"spinner\"></div>\r\n       \r\n      ) : (\r\n        <div></div>\r\n      )}\r\n    </button>\r\n  </div>\r\n) : (\r\n  <div>\r\n    {otpVerified ? (\r\n      <div style={{ color: 'green' }}>\r\n        <p >OTP verified successfully! Click on Register to proceed</p>\r\n      </div>\r\n    ) : (\r\n      <div>\r\n        <div className=\"helpful-line\">Click on send OTP to verify your email</div>\r\n        <button\r\n          type=\"button\"\r\n          onClick={handleSendOTP}\r\n          disabled={otpSent || registrationInProgress || otpSendingInProgress}\r\n        >\r\n          {otpSendingInProgress ? (\r\n             <div className=\"status-container\">\r\n             <div className=\"spinner\"></div>\r\n             <div className=\"status-text\">Sending OTP</div>\r\n           </div>\r\n          ) : (\r\n            'Send OTP'\r\n          )}\r\n        </button>\r\n      </div>\r\n    )}\r\n  </div>\r\n)}\r\n\r\n{otpVerified && (\r\n  <button type=\"submit\">\r\n    {registrationInProgress ? (\r\n       <div className=\"status-container\">\r\n       <div className=\"spinner\"></div>\r\n       <div className=\"status-text\">Registering</div>\r\n     </div>\r\n    ) : (\r\n      'Register'\r\n    )}\r\n  </button>\r\n)}\r\n\r\n      </form>\r\n     \r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Register;\r\n","C:\\Users\\Madar\\Desktop\\TalentTrackerFrontEnd\\src\\components\\Login.js",["131"],[],"import React, { useState } from 'react';\r\nimport { useNavigate, useLocation, Link } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport '../css/LoginForm.css';\r\nimport ForgotPassword from './ForgotPassword';\r\nimport { useUserContext } from './UserProvider'; \r\n\r\nconst Login = ({ handleLogin }) => {\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [errorMessage, setErrorMessage] = useState('');\r\n  const location = useLocation();\r\n  const registrationSuccess = location.state?.registrationSuccess;\r\n  const navigate = useNavigate();\r\n  const apiUrl = process.env.REACT_APP_API_BASE_URL;\r\n  // Get the setUser function from the UserContext\r\n  const { setUser } = useUserContext();\r\n \r\n  const isFormValid = () => {\r\n    if (!email.trim() || !password.trim()) {\r\n      return false; // Username and password should not be empty or whitespace only\r\n    }\r\n    return true;\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    if (!isFormValid()) {\r\n      window.alert('Please enter both username and password.');\r\n      return;\r\n    }\r\n    try {\r\n      let loginEndpoint;\r\n      let count;\r\n      if (email === 'admin' && password === 'admin') {\r\n        count = 0;\r\n        loginEndpoint = `${apiUrl}/adminlogin`; // User login endpoint\r\n      } else {\r\n        count = 1;\r\n        loginEndpoint = `${apiUrl}/login`; // Admin login endpoint\r\n      }\r\n\r\n      const response = await axios.post(loginEndpoint, {\r\n        email,\r\n        password,\r\n      });\r\n\r\n      setErrorMessage('');\r\n      handleLogin();\r\n      // Assuming the response.data contains user data\r\n      const userData = response.data;\r\n\r\n      // Set user data in the context\r\n      setUser(userData);\r\n      console.log('Login successful', userData);\r\n\r\n      if (count === 0) {\r\n        navigate('/admin');\r\n      } else {\r\n        navigate('/user');\r\n      }\r\n    } catch (error) {\r\n      setErrorMessage('Login failed. Please check your user name and password.');\r\n      console.error('Login failed', error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"login-form-container\">\r\n      <form className=\"login-form\" onSubmit={handleSubmit}>\r\n        {registrationSuccess && (\r\n          <div className=\"success-message\">\r\n            Registration successful! Please log in to continue.\r\n          </div>\r\n        )}\r\n        <h2>Login</h2>\r\n        <div className=\"form-group\">\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Enter your Email\"\r\n            value={email}\r\n            onChange={(e) => setEmail(e.target.value)}\r\n          />\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <input\r\n            type=\"password\"\r\n            placeholder=\"Password\"\r\n            value={password}\r\n            onChange={(e) => setPassword(e.target.value)}\r\n          />\r\n        </div>\r\n        <Link to=\"/forgot-password\" className=\"forgot-password-link\">\r\n          Forgot Password\r\n        </Link>\r\n        <button type=\"submit\">Login</button>\r\n        \r\n        {errorMessage && <div className=\"error-message\">{errorMessage}</div>}\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","C:\\Users\\Madar\\Desktop\\TalentTrackerFrontEnd\\src\\components\\HomePage.js",["132","133","134"],[],"import React from 'react';\r\nimport '../css/HomePage.css';\r\nimport { faUserPlus } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faSignInAlt } from '@fortawesome/free-solid-svg-icons';\r\nimport { Link } from 'react-router-dom';\r\nimport Asset from '../images/Asset.png';\r\n\r\nconst HomePage = () => {\r\n  return (\r\n    <div className=\"home-page\">\r\n      <div className=\"left-side\">\r\n        <h2>Where Opportunities and Aspirations Align</h2>\r\n        <p>\r\n          Empowering your journey towards success and fulfillment. Whether you are a recruiter looking for top talents or an individual seeking new opportunities,\r\n          Join us today and unlock the full potential of talent management!\r\n        </p>\r\n\r\n        {/* Wrap the buttons in a container */}\r\n        <div className=\"cta-buttons-container\">\r\n          <Link to=\"/register\" className=\"cta-button\">JobSeekerRegister</Link>\r\n          <Link to=\"/employerRegister\" className=\"cta-button\">RecruiterRegister</Link>\r\n        </div>\r\n      </div>\r\n      <div className=\"right-side\">\r\n        <img src={Asset} alt=\"Talent Tracker\" />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HomePage;\r\n","C:\\Users\\Madar\\Desktop\\TalentTrackerFrontEnd\\src\\components\\UserHome.js",[],[],"C:\\Users\\Madar\\Desktop\\TalentTrackerFrontEnd\\src\\components\\About.js",[],[],"C:\\Users\\Madar\\Desktop\\TalentTrackerFrontEnd\\src\\components\\Admin.js",[],[],"C:\\Users\\Madar\\Desktop\\TalentTrackerFrontEnd\\src\\components\\EmployerHome.js",[],[],"C:\\Users\\Madar\\Desktop\\TalentTrackerFrontEnd\\src\\components\\ForgotPassword.js",["135"],[],"import React, { useState } from 'react';\r\nimport axios from 'axios';\r\nimport '../css/ForgotPassword.css'\r\n\r\nconst ForgotPassword = () => {\r\n  const [email, setEmail] = useState('');\r\n  const [otp, setOtp] = useState('');\r\n  const [password, setPassword] = useState(''); // New password field\r\n  const [confirmPassword, setConfirmPassword] = useState(''); // Confirm password field\r\n  const [resetSuccess, setResetSuccess] = useState(false);\r\n  const [resetError, setResetError] = useState('');\r\n  const [otpSent, setOtpSent] = useState(false);\r\n  const [otpVerified, setOtpVerified] = useState(false);\r\n  const [isPasswordValid, setIsPasswordValid] = useState(true); // Track password validation\r\n  const apiUrl = process.env.REACT_APP_API_BASE_URL;\r\n\r\n  const validatePassword = (value) => {\r\n    // Password must be at least 6 characters long\r\n    const isLengthValid = value.length >= 6;\r\n\r\n    // Password must contain at least one uppercase letter\r\n    const hasUppercase = /[A-Z]/.test(value);\r\n\r\n    // Password must contain at least one special character (non-alphanumeric)\r\n    const hasSpecialChar = /[^A-Za-z0-9]/.test(value);\r\n\r\n    // Password cannot contain spaces\r\n    const hasNoSpaces = !/\\s/.test(value);\r\n\r\n    const isValid = isLengthValid && hasUppercase && hasSpecialChar && hasNoSpaces;\r\n\r\n    setIsPasswordValid(isValid);\r\n\r\n    return isValid;\r\n  };\r\n\r\n  const handleSendOTP = async () => {\r\n    try {\r\n      // Send a request to the server to send an OTP to the provided email\r\n      const response = await axios.post(`${apiUrl}/verifyEmail`, { email });\r\n\r\n      if (response.data === 'OTP sent successfully') {\r\n        setOtpSent(true);\r\n        setResetSuccess(false);\r\n        setResetError('');\r\n      } else {\r\n        setOtpSent(false);\r\n        setOtpVerified(false);\r\n        setResetError('User with given Email Id was not found in the system');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error sending OTP:', error);\r\n      setOtpSent(false);\r\n      setOtpVerified(false);\r\n      setResetError('An error occurred. Please try again later.');\r\n    }\r\n  };\r\n\r\n  const handleVerifyOTP = async () => {\r\n    try {\r\n      // Send a request to the server to verify the OTP\r\n      const response = await axios.post(`${apiUrl}/verify-otp`, { email, otp });\r\n\r\n      if (response.data === 'OTP verified successfully') {\r\n        setOtpVerified(true);\r\n        setResetError('');\r\n      } else {\r\n        setOtpVerified(false);\r\n        setResetError('OTP verification failed. Please enter a valid OTP.');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error verifying OTP:', error);\r\n      setOtpVerified(false);\r\n      setResetError('OTP verification failed. Please enter a valid OTP.');\r\n    }\r\n  };\r\n\r\n  const handleResetPassword = async () => {\r\n\r\n    if (password !== confirmPassword) {\r\n      setResetSuccess(false);\r\n      setResetError('Passwords do not match. Please make sure the passwords match.');\r\n      return;\r\n    }\r\n    \r\n// Validate the password as the user types\r\nif (!validatePassword(password)) {\r\n  setResetSuccess(false);\r\n  setResetError('Password does not meet the criteria.');\r\n  return;\r\n}\r\n\r\n    try {\r\n      // Send a request to the server to reset the password with the new password\r\n      const response = await axios.post(`${apiUrl}/reset-password`, {\r\n        email,\r\n        password,\r\n        \r\n      });\r\n\r\n      if (response.data === 'Password reset was done successfully') {\r\n        setResetSuccess(true);\r\n        setResetError('');\r\n      } else {\r\n        setResetSuccess(false);\r\n        setResetError('Password reset failed. Please try again later.');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error resetting password:', error);\r\n      setResetSuccess(false);\r\n      setResetError('An error occurred. Please try again later.');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"forgot-password-container\">\r\n      <div className=\"forgot-password-content\">\r\n        {resetSuccess ? (\r\n          <div className=\"success-message\">\r\n            Password reset was done successfully. Please click on JobSeekerLogin to continue\r\n          </div>\r\n        ) : (\r\n          <div>\r\n            <h2>Forgot Password</h2>\r\n            <input\r\n              type=\"email\"\r\n              placeholder=\"Enter your Email\"\r\n              value={email}\r\n              onChange={(e) => setEmail(e.target.value)}\r\n            />\r\n            {otpSent ? (\r\n              otpVerified ? (\r\n                <div>\r\n                 \r\n                  <input\r\n                    type=\"password\"\r\n                    placeholder=\"New Password\"\r\n                    value={password}\r\n                    onChange={(e) => setPassword(e.target.value)}\r\n                  />\r\n                  \r\n\r\n                  <input\r\n                    type=\"password\"\r\n                    placeholder=\"Confirm New Password\"\r\n                    value={confirmPassword}\r\n                    onChange={(e) => setConfirmPassword(e.target.value)}\r\n                  />\r\n                  <div className=\"helpful-line\">\r\n  Password must be at least 6 characters long, contain one uppercase letter, one lowercase letter, one number, one special character, and no spaces.\r\n</div>\r\n\r\n                  <button onClick={handleResetPassword}>Reset Password</button>\r\n                  <p style={{ color: 'green' }}>OTP verified successfully!</p>\r\n                </div>\r\n              ) : (\r\n                <div>\r\n                  <input\r\n                    type=\"text\"\r\n                    placeholder=\"Enter OTP\"\r\n                    value={otp}\r\n                    onChange={(e) => setOtp(e.target.value)}\r\n                  />\r\n                  <button type=\"button\" onClick={handleVerifyOTP}>Verify OTP</button>\r\n                </div>\r\n              )\r\n            ) : (\r\n              <button type=\"button\" onClick={handleSendOTP}>Send OTP</button>\r\n            )}\r\n            {resetError && <div className=\"error-message\">{resetError}</div>}\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ForgotPassword;\r\n","C:\\Users\\Madar\\Desktop\\TalentTrackerFrontEnd\\src\\components\\RecurterRegister.js",["136"],[],"import React, { useState } from 'react';\r\nimport OTPVerification from './OTPVerification';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport '../css/RegistrationForm.css';\r\n\r\nconst RecruiterRegister = () => {\r\n  const [otpSent, setOTPSent] = useState(false);\r\n  const [otpVerified, setOTPVerified] = useState(false);\r\n  const [companyid, setCompanyid] = useState('');\r\n  const [companyname, setCompanyname] = useState('');\r\n  const [typeofcompany, setTypeofcompany] = useState('');\r\n  const [yourRole, setYourRole] = useState('');\r\n  const [employeeCount, setEmployeeCount] = useState('');\r\n  const [email, setEmail] = useState('');\r\n  const [mobilenumber, setMobilenumber] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [confirmPassword, setConfirmPassword] = useState('');\r\n  const [errorMessage, setErrorMessage] = useState('');\r\n  const [registrationSuccess, setRegistrationSuccess] = useState(false);\r\n  const navigate = useNavigate();\r\n  const [registrationInProgress, setRegistrationInProgress] = useState(false);\r\n  const [otpSendingInProgress, setOTPSendingInProgress] = useState(false); // New state variable for sending OTP\r\n  const [otpVerifyingInProgress, setOTPVerifyingInProgress] = useState(false); // New state variable for verifying OTP \r\n  const apiUrl = process.env.REACT_APP_API_BASE_URL;\r\n\r\n  const handleSendOTP = async () => {\r\n    try {\r\n      setOTPSendingInProgress(true); // Set sending OTP in progress\r\n      await axios.post(`${apiUrl}/send-otp`, { email });\r\n      setOTPSent(true);\r\n      setOTPSendingInProgress(false); // Clear sending OTP in progress\r\n    } catch (error) {\r\n      console.error('Error sending OTP:', error);\r\n      setOTPSendingInProgress(false); // Clear sending OTP in progress in case of error\r\n    }\r\n  };\r\n\r\n  const isPasswordValid = (password) => {\r\n    // Password must be at least 6 characters long\r\n    if (password.length < 6) {\r\n      return false;\r\n    }\r\n  \r\n    // Password must contain at least one uppercase letter\r\n    if (!/[A-Z]/.test(password)) {\r\n      return false;\r\n    }\r\n  \r\n    // Password must contain at least one special character (non-alphanumeric)\r\n    if (!/[^A-Za-z0-9]/.test(password)) {\r\n      return false;\r\n    }\r\n  \r\n    // Password cannot contain spaces\r\n    if (/\\s/.test(password)) {\r\n      return false;\r\n    }\r\n  \r\n    return true;\r\n  };\r\n  const isEmailValid = (email) => {\r\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n    return emailRegex.test(email);\r\n  };\r\n  const isMobileNumberValid = (mobilenumber) => {\r\n    // Mobile number must contain only numeric digits\r\n    if (!/^\\d+$/.test(mobilenumber)) {\r\n      return false;\r\n    }\r\n\r\n    // Mobile number must have a specific length (e.g., 10 digits)\r\n    if (mobilenumber.length !== 10) {\r\n      return false;\r\n    }\r\n\r\n    const firstDigit = mobilenumber.charAt(0);\r\n  if (!['6', '7', '8', '9'].includes(firstDigit)) {\r\n    return false;\r\n  }\r\n    return true;\r\n  };\r\n\r\n  const isFormValid = () => {\r\n    if (!isEmailValid(email)) {\r\n      setErrorMessage('Please enter a valid email address.');\r\n      return false;\r\n    }\r\n    if (!isMobileNumberValid(mobilenumber)) {\r\n      setErrorMessage('Please enter a valid 10-digit mobile number & should begin with 6 or 7 or 8 or 9.');\r\n      return false;\r\n    }\r\n    if (!isPasswordValid(password)) {\r\n      setErrorMessage('Password must be at least 6 characters long and should have one cpital letter and one small letter and no spaces are allowed.');\r\n      return false;\r\n    }\r\n    \r\n    if (password !== confirmPassword) {\r\n      setErrorMessage('Passwords do not match.');\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n    \r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    if (!isFormValid()) {\r\n      return; // Do not proceed with registration if form is invalid\r\n    }\r\n\r\n    try {\r\n      setRegistrationInProgress(true);\r\n      const response = await axios.post(`${apiUrl}/EmpRegister`, {\r\n        \r\n        companyid,\r\n        companyname,\r\n        typeofcompany,\r\n        yourRole,\r\n        employeeCount,\r\n        mobilenumber,\r\n        email,\r\n        password,\r\n      });\r\n\r\n      setErrorMessage('');\r\n      setRegistrationSuccess(true);\r\n\r\n      console.log('Registration successful', response.data);\r\n      \r\n      setRegistrationInProgress(false);\r\n      if (otpSent && otpVerified) {\r\n        navigate('/login', { state: { registrationSuccess: true } });\r\n      }\r\n    } catch (error) {\r\n      setErrorMessage('Registration failed. Please try again later.');\r\n      window.alert('Registration failed! User with this email already exists.');\r\n      console.error('Registration failed', error);\r\n    }\r\n  };\r\n\r\n  \r\n\r\n  return (\r\n    <div className=\"registration-form-container\">\r\n      <form className=\"registration-form\" onSubmit={handleSubmit}>\r\n        <h2>Recruiter Register</h2>\r\n        {errorMessage && <div className=\"error-message\">{errorMessage}</div>}\r\n        \r\n        \r\n        <div className=\"form-group\">\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Company ID\"\r\n            value={companyid}\r\n            onChange={(e) => setCompanyid(e.target.value)}\r\n          />\r\n          <div className=\"helpful-line\">Enter your company ID</div>\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Company Name\"\r\n            value={companyname}\r\n            onChange={(e) => setCompanyname(e.target.value)}\r\n          />\r\n          <div className=\"helpful-line\">Enter your company name</div>\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Type of Company\"\r\n            value={typeofcompany}\r\n            onChange={(e) => setTypeofcompany(e.target.value)}\r\n          />\r\n          <div className=\"helpful-line\">Enter the type of your company</div>\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <select value={yourRole} onChange={(e) => setYourRole(e.target.value)}>\r\n            <option value=\"\">Select Your Role</option>\r\n            <option value=\"Hiring Manager\">Hiring Manager</option>\r\n            <option value=\"Company Recruiter\">Company Recruiter</option>\r\n            <option value=\"Technical Recruiter\">Technical Recruiter</option>\r\n            <option value=\"Others\">Others</option>\r\n          </select>\r\n          <div className=\"helpful-line\">Select your role from the options</div>\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <select value={employeeCount} onChange={(e) => setEmployeeCount(e.target.value)}>\r\n            <option value=\"\">Select Employee Count</option>\r\n            <option value=\"5 to 10 Employees\">5 to 10 Employees</option>\r\n            <option value=\"10 to 50 Employees\">10 to 50 Employees</option>\r\n            <option value=\"50 to 200 Employees\">50 to 200 Employees</option>\r\n            <option value=\"200+ Employees\">200+ Employees</option>\r\n          </select>\r\n          <div className=\"helpful-line\">Select your company's employee count from the options</div>\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <input\r\n            type=\"email\"\r\n            placeholder=\"Email\"\r\n            value={email}\r\n            onChange={(e) => setEmail(e.target.value)}\r\n          />\r\n          {/* Helpful line */}\r\n          <div className=\"helpful-line\">Enter your email address</div>\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Mobile Number\"\r\n            value={mobilenumber}\r\n            onChange={(e) => setMobilenumber(e.target.value)}\r\n          />\r\n          {/* Helpful line */}\r\n          <div className=\"helpful-line\">Enter your 10-digit mobile number and mobile number should begin with 6 or 7 or 8 or 9</div>\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <input\r\n            type=\"password\"\r\n            placeholder=\"Password\"\r\n            value={password}\r\n            onChange={(e) => setPassword(e.target.value)}\r\n          />\r\n          {/* Helpful line */}\r\n          <div className=\"helpful-line\">\r\n          Password must be at least 6 characters long, contain one uppercase letter, one lowercase letter, one number, one special character, and no spaces.\r\n          </div>\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <input\r\n            type=\"password\"\r\n            placeholder=\"Confirm Password\"\r\n            value={confirmPassword}\r\n            onChange={(e) => setConfirmPassword(e.target.value)}\r\n          />\r\n          {/* Helpful line */}\r\n          <div className=\"helpful-line\">Re-enter your password to confirm</div>\r\n        </div>\r\n        {/* Rest of the code remains the same */}\r\n         {/* Include the PdfUpload component here */}\r\n        \r\n         {otpSent && !otpVerified ? (\r\n  <div>\r\n    <p style={{ color: 'green' }}>OTP sent to your email. Please check and enter below:</p>\r\n    <OTPVerification\r\n            email={email}\r\n            onOTPVerified={() => setOTPVerified(true)}\r\n            otpVerifyingInProgress={otpVerifyingInProgress}\r\n            setOTPVerifyingInProgress={setOTPVerifyingInProgress}\r\n          />\r\n    <button\r\n      type=\"button\"\r\n      onClick={handleSendOTP}\r\n      disabled={otpSent || registrationInProgress || otpSendingInProgress}\r\n    >\r\n      {otpSendingInProgress ? (\r\n        \r\n        <div className=\"spinner\"></div>\r\n       \r\n      ) : (\r\n        <div></div>\r\n      )}\r\n    </button>\r\n  </div>\r\n) : (\r\n  <div>\r\n    {otpVerified ? (\r\n      <div style={{ color: 'green' }}>\r\n        <p>OTP verified successfully! Click on Register to proceed</p>\r\n      </div>\r\n    ) : (\r\n      <div>\r\n        <div className=\"helpful-line\">Click on send OTP to verify your email</div>\r\n        <button\r\n          type=\"button\"\r\n          onClick={handleSendOTP}\r\n          disabled={otpSent || registrationInProgress || otpSendingInProgress}\r\n        >\r\n          {otpSendingInProgress ? (\r\n             <div className=\"status-container\">\r\n             <div className=\"spinner\"></div>\r\n             <div className=\"status-text\">Sending OTP</div>\r\n           </div>\r\n          ) : (\r\n            'Send OTP'\r\n          )}\r\n        </button>\r\n      </div>\r\n    )}\r\n  </div>\r\n)}\r\n\r\n{otpVerified && (\r\n  <button type=\"submit\">\r\n    {registrationInProgress ? (\r\n       <div className=\"status-container\">\r\n       <div className=\"spinner\"></div>\r\n       <div className=\"status-text\">Registering</div>\r\n     </div>\r\n    ) : (\r\n      'Register'\r\n    )}\r\n  </button>\r\n)}\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RecruiterRegister;\r\n","C:\\Users\\Madar\\Desktop\\TalentTrackerFrontEnd\\src\\components\\Navbar.js",["137","138","139","140","141","142"],[],"import React from 'react';\r\nimport { Link, useNavigate } from 'react-router-dom';\r\nimport '../css/Navbar.css';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faUser } from '@fortawesome/free-solid-svg-icons';\r\nimport { faHome } from '@fortawesome/free-solid-svg-icons';\r\nimport { faSignInAlt } from '@fortawesome/free-solid-svg-icons';\r\nimport { faSignOutAlt } from '@fortawesome/free-solid-svg-icons';\r\nimport { faUserCircle } from '@fortawesome/free-solid-svg-icons';\r\nimport logo from '../images/logo.png';\r\n\r\nconst Navbar = ({ isLoggedIn, handleLogout }) => {\r\n  const navigate = useNavigate();\r\n  const logout = () => {\r\n    // Perform logout actions (e.g., clear authentication tokens)\r\n    // After successful logout, call the handleLogout function from the parent component\r\n    handleLogout();\r\n    navigate('/');\r\n  };\r\n\r\n  return (\r\n    <nav className=\"navbar\">\r\n      <div className=\"navbar-left\">\r\n        <h3 className=\"navbar-title\">\r\n          <img src={logo} alt=\"Talent Tracker\" />\r\n        </h3>\r\n      </div>\r\n      <ul className=\"navbar-list\">\r\n        <li className=\"navbar-item\">\r\n          <Link to=\"/\" className=\"navbar-link\">\r\n             Home\r\n          </Link>\r\n        </li>\r\n        <li className=\"navbar-item\">\r\n          <Link to=\"/about\" className=\"navbar-link\">\r\n             About\r\n          </Link>\r\n        </li>\r\n        {isLoggedIn ? (\r\n          <>\r\n            <li className=\"navbar-item\">\r\n              <button className=\"navbar-link\" onClick={logout}>\r\n               Logout\r\n              </button>\r\n            </li>\r\n          </>\r\n        ) : (<>\r\n          <li className=\"navbar-item\">\r\n            <Link to=\"/login\" className=\"navbar-link\">\r\n            JobSeekerLogin\r\n            </Link>\r\n          </li>\r\n           \r\n          <li className=\"navbar-item\">\r\n            <Link to=\"/employerlogin\" className=\"navbar-link\">\r\n             RecruiterLogin\r\n            </Link>\r\n          </li>\r\n          </>\r\n        )}\r\n      </ul>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n","C:\\Users\\Madar\\Desktop\\TalentTrackerFrontEnd\\src\\components\\Footer.js",[],[],"C:\\Users\\Madar\\Desktop\\TalentTrackerFrontEnd\\src\\components\\Profile.js",["143","144","145","146"],[],"import React, { useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport \"../css/Profile.css\";\r\nimport Sidebar from \"./Sidebar\";\r\nconst apiUrl = process.env.REACT_APP_API_BASE_URL;\r\n\r\n \r\n\r\nconst Profile = () => {\r\n  const navigate = useNavigate();\r\n\r\n  const [isProfileUpdated, setIsProfileUpdated] = useState(false);\r\n\r\n  const [basicDetails, setBasicDetails] = useState({\r\n\r\n    firstName: \"\",\r\n\r\n    lastName: \"\",\r\n\r\n    dateOfBirth: \"\",\r\n\r\n    address: \"\",\r\n\r\n    city: \"\",\r\n\r\n    state: \"\",\r\n\r\n    pincode: \"\",\r\n\r\n    alternatePhoneNumber: \"\",\r\n\r\n  });\r\n\r\n \r\n\r\n  const [xClassDetails, setXClassDetails] = useState({\r\n\r\n    xschoolName: \"\",\r\n\r\n    xboard: \"\",\r\n\r\n    xpercentage: \"\",\r\n\r\n    xyearOfPassing: \"\",\r\n\r\n    xCity: \"\",\r\n\r\n    xState: \"\",\r\n\r\n    xPincode: \"\",\r\n\r\n  });\r\n\r\n \r\n\r\n  const [intermediateDetails, setIntermediateDetails] = useState({\r\n\r\n    icollegeName: \"\",\r\n\r\n    iboard: \"\",\r\n\r\n    iprogram: \"\",\r\n\r\n    ipercentage: \"\",\r\n\r\n    iyearOfPassing: \"\",\r\n\r\n    iCity: \"\",\r\n\r\n    iState: \"\",\r\n\r\n  });\r\n\r\n \r\n\r\n  const [graduationDetails, setGraduationDetails] = useState({\r\n\r\n    gcollegeName: \"\",\r\n\r\n    gboard: \"\",\r\n\r\n    gprogram: \"\",\r\n\r\n    gpercentage: \"\",\r\n\r\n    gyearOfPassing: \"\",\r\n\r\n    gCity: \"\",\r\n\r\n    gState: \"\",\r\n\r\n  });\r\n\r\n  // Skills state\r\n  const [skills, setSkills] = useState(\"\");\r\n  const [experienceDetails, setExperienceDetails] = useState([\r\n    {\r\n      company: \"\",\r\n      position: \"\",\r\n      startDate: \"\",\r\n      endDate: \"\",\r\n    },\r\n  ]);\r\n  \r\n  \r\n\r\n  const [resumeFile, setResumeFile] = useState(null);\r\n  const [dragging, setDragging] = useState(false);\r\n\r\n  const [selectedSkill, setSelectedSkill] = useState(\"\");\r\n\r\n\r\n  const handleExperienceChange = (e, index, field) => {\r\n    const newExperienceDetails = [...experienceDetails];\r\n    newExperienceDetails[index][field] = e.target.value;\r\n    setExperienceDetails(newExperienceDetails);\r\n  };\r\n  const addExperience = () => {\r\n    setExperienceDetails([\r\n      ...experienceDetails,\r\n      { company: \"\", position: \"\", startDate: \"\", endDate: \"\" }\r\n    ]);\r\n  };\r\n  \r\n  \r\n  const handleSkillSelect = (skill) => {\r\n    if (skills.includes(skill)) {\r\n      setSkills(skills.filter((s) => s !== skill));\r\n    } else {\r\n      setSkills([...skills, skill]);\r\n    }\r\n  };\r\n  \r\n\r\n  const handleFileDrop = (e) => {\r\n    e.preventDefault();\r\n    setDragging(false);\r\n    const file = e.dataTransfer.files[0];\r\n    setResumeFile(file);\r\n  };\r\n  \r\n \r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n  \r\n    // Prepare data to be sent\r\n    const userData = {\r\n      basicDetails,\r\n      xClassDetails,\r\n      intermediateDetails,\r\n      graduationDetails,\r\n      skills,\r\n      experienceDetails,\r\n    };\r\n  \r\n    try {\r\n      // Send data to the backend using Fetch API\r\n      const response = await fetch(`${apiUrl}/updateProfile`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json', // Set the Content-Type to JSON\r\n        },\r\n        body: JSON.stringify(userData), // Convert data to JSON format\r\n      });\r\n      if (response.ok) {\r\n        // Data successfully sent to the backend\r\n        console.log('Data sent successfully!');\r\n        setIsProfileUpdated(true);\r\n        window.scrollTo(0, 0); // Scroll to the top of the page\r\n        setTimeout(() => {\r\n          setIsProfileUpdated(false); // Reset the success message after a delay\r\n          window.location.reload(); // Reload the page to clear the form\r\n        }, 100); // Delay for 100 milliseconds\r\n      } else {\r\n        // Handle error case\r\n        console.error('Failed to send data to the backend');\r\n      }\r\n      \r\n    } catch (error) {\r\n      console.error('An error occurred:', error);\r\n    }\r\n  };\r\n  \r\n  \r\n  \r\n\r\n  return (\r\n    <div className=\"profile-container\">\r\n      <div className=\"sidebar\">\r\n       <Sidebar />\r\n      </div>\r\n\r\n     \r\n    <form className=\"profile-form-container\" onSubmit={handleSubmit}>\r\n       <h1>Update your profile</h1>\r\n       {isProfileUpdated && (\r\n        <div className=\"success-message\">\r\n          Profile updated successfully!\r\n        </div>\r\n      )}\r\n      {/* File Upload section */}\r\n      <div className=\"file-upload-container\">\r\n        <p className=\"Details-name\">Upload your resume:</p>\r\n        <input\r\n          type=\"file\"\r\n          accept=\".pdf,.doc,.docx\"\r\n          onChange={(e) => setResumeFile(e.target.files[0])}\r\n        />\r\n        <div\r\n        className={`file-drop-area ${dragging ? \"dragging\" : \"\"}`}\r\n        onDrop={handleFileDrop}\r\n        onDragOver={(e) => {\r\n          e.preventDefault();\r\n          setDragging(true);\r\n        }}\r\n        onDragLeave={() => setDragging(false)}\r\n      >\r\n        <p className=\"Details-name\">Drag and drop your resume here</p>\r\n      </div>\r\n\r\n      </div>\r\n\r\n\r\n      <p className=\"Details-name\">Basic Details:</p>\r\n\r\n      <table>\r\n\r\n        <tbody>\r\n\r\n          <tr>\r\n\r\n            <td>\r\n\r\n              <input\r\n\r\n                type=\"text\"\r\n\r\n                placeholder=\"FirstName\"\r\n\r\n                className=\"firstName\"\r\n\r\n                value={basicDetails.firstName}\r\n\r\n                onChange={(e) =>\r\n\r\n                  setBasicDetails({\r\n\r\n                    ...basicDetails,\r\n\r\n                    firstName: e.target.value,\r\n\r\n                  })\r\n\r\n                }\r\n\r\n              />\r\n\r\n            </td>\r\n\r\n            <td>\r\n\r\n              <input\r\n\r\n                type=\"text\"\r\n\r\n                placeholder=\"LastName\"\r\n\r\n                className=\"lastName\"\r\n\r\n                value={basicDetails.lastName}\r\n\r\n                onChange={(e) =>\r\n\r\n                  setBasicDetails({ ...basicDetails, lastName: e.target.value })\r\n\r\n                }\r\n\r\n              />\r\n\r\n            </td>\r\n\r\n          </tr>\r\n\r\n          <tr>\r\n\r\n            <td>\r\n\r\n              <input\r\n\r\n                type=\"date\"\r\n\r\n                placeholder=\"DateOfBirth\"\r\n\r\n                className=\"dateofbirth\"\r\n\r\n                value={basicDetails.dateOfBirth}\r\n\r\n                onChange={(e) =>\r\n\r\n                  setBasicDetails({\r\n\r\n                    ...basicDetails,\r\n\r\n                    dateOfBirth: e.target.value,\r\n\r\n                  })\r\n\r\n                }\r\n\r\n              />\r\n\r\n            </td>\r\n\r\n            <td>\r\n\r\n              <input\r\n\r\n                type=\"text\"\r\n\r\n                placeholder=\"Address\"\r\n\r\n                value={basicDetails.address}\r\n\r\n                onChange={(e) =>\r\n\r\n                  setBasicDetails({ ...basicDetails, address: e.target.value })\r\n\r\n                }\r\n\r\n              />\r\n\r\n            </td>\r\n\r\n          </tr>\r\n\r\n          <tr>\r\n\r\n            <td>\r\n\r\n              <input\r\n\r\n                type=\"text\"\r\n\r\n                placeholder=\"City\"\r\n\r\n                value={basicDetails.city}\r\n\r\n                onChange={(e) =>\r\n\r\n                  setBasicDetails({ ...basicDetails, city: e.target.value })\r\n\r\n                }\r\n\r\n              />\r\n\r\n            </td>\r\n\r\n            <td>\r\n\r\n              <input\r\n\r\n                type=\"text\"\r\n\r\n                placeholder=\"State\"\r\n\r\n                value={basicDetails.state}\r\n\r\n                onChange={(e) =>\r\n\r\n                  setBasicDetails({ ...basicDetails, state: e.target.value })\r\n\r\n                }\r\n\r\n              />\r\n\r\n            </td>\r\n\r\n          </tr>\r\n\r\n          <tr>\r\n\r\n            <td>\r\n\r\n              <input\r\n\r\n                type=\"text\"\r\n\r\n                placeholder=\"Pincode\"\r\n\r\n                value={basicDetails.pincode}\r\n\r\n                onChange={(e) =>\r\n\r\n                  setBasicDetails({ ...basicDetails, pincode: e.target.value })\r\n\r\n                }\r\n\r\n              />\r\n\r\n            </td>\r\n\r\n            <td>\r\n\r\n              <input\r\n\r\n                type=\"text\"\r\n\r\n                placeholder=\"Alternate phone number\"\r\n\r\n                value={basicDetails.alternatePhoneNumber}\r\n\r\n                onChange={(e) =>\r\n\r\n                  setBasicDetails({\r\n\r\n                    ...basicDetails,\r\n\r\n                    alternatePhoneNumber: e.target.value,\r\n\r\n                  })\r\n\r\n                }\r\n\r\n              />\r\n\r\n            </td>\r\n\r\n          </tr>\r\n\r\n        </tbody>\r\n\r\n      </table>\r\n\r\n \r\n\r\n      <p className=\"Details-name\">X-Class Details:</p>\r\n\r\n      <table>\r\n\r\n        <tbody>\r\n\r\n          <tr>\r\n\r\n            <td>\r\n\r\n              <input\r\n\r\n                type=\"text\"\r\n\r\n                placeholder=\"School Name\"\r\n\r\n                value={xClassDetails.xschoolName}\r\n\r\n                onChange={(e) =>\r\n\r\n                  setXClassDetails({\r\n\r\n                    ...xClassDetails,\r\n\r\n                    xschoolName: e.target.value,\r\n\r\n                  })\r\n\r\n                }\r\n\r\n              />\r\n\r\n            </td>\r\n\r\n            <td>\r\n\r\n              <input\r\n\r\n                type=\"text\"\r\n\r\n                placeholder=\"Board\"\r\n\r\n                value={xClassDetails.xboard}\r\n\r\n                onChange={(e) =>\r\n\r\n                  setXClassDetails({ ...xClassDetails, xboard: e.target.value })\r\n\r\n                }\r\n\r\n              />\r\n\r\n            </td>\r\n\r\n          </tr>\r\n\r\n          <tr>\r\n\r\n            <td>\r\n\r\n              <input\r\n\r\n                type=\"text\"\r\n\r\n                placeholder=\"Percentage\"\r\n\r\n                value={xClassDetails.xpercentage}\r\n\r\n                onChange={(e) =>\r\n\r\n                  setXClassDetails({\r\n\r\n                    ...xClassDetails,\r\n\r\n                    xpercentage: e.target.value,\r\n\r\n                  })\r\n\r\n                }\r\n\r\n              />\r\n\r\n            </td>\r\n\r\n            <td>\r\n\r\n              <input\r\n\r\n                type=\"text\"\r\n\r\n                placeholder=\"Year of passing\"\r\n\r\n                value={xClassDetails.xyearOfPassing}\r\n\r\n                onChange={(e) =>\r\n\r\n                  setXClassDetails({\r\n\r\n                    ...xClassDetails,\r\n\r\n                    xyearOfPassing: e.target.value,\r\n\r\n                  })\r\n\r\n                }\r\n\r\n              />\r\n\r\n            </td>\r\n\r\n          </tr>\r\n\r\n          <tr>\r\n\r\n            <td>\r\n\r\n              <input\r\n\r\n                type=\"text\"\r\n\r\n                placeholder=\"City\"\r\n\r\n                value={xClassDetails.xCity}\r\n\r\n                onChange={(e) =>\r\n\r\n                  setXClassDetails({ ...xClassDetails, xCity: e.target.value })\r\n\r\n                }\r\n\r\n              />\r\n\r\n            </td>\r\n\r\n            <td>\r\n\r\n              <input\r\n\r\n                type=\"text\"\r\n\r\n                placeholder=\"State\"\r\n\r\n                value={xClassDetails.xState}\r\n\r\n                onChange={(e) =>\r\n\r\n                  setXClassDetails({ ...xClassDetails, xState: e.target.value })\r\n\r\n                }\r\n\r\n              />\r\n\r\n            </td>\r\n\r\n          </tr>\r\n\r\n          <tr>\r\n\r\n            <td>\r\n\r\n              <input\r\n\r\n                type=\"text\"\r\n\r\n                placeholder=\"Pincode\"\r\n\r\n                value={xClassDetails.xPincode}\r\n\r\n                onChange={(e) =>\r\n\r\n                  setXClassDetails({\r\n\r\n                    ...xClassDetails,\r\n\r\n                    xPincode: e.target.value,\r\n\r\n                  })\r\n\r\n                }\r\n\r\n              />\r\n\r\n            </td>\r\n\r\n          </tr>\r\n\r\n        </tbody>\r\n\r\n      </table>\r\n\r\n \r\n\r\n      <p className=\"Details-name\">Intermediate Details:</p>\r\n\r\n      <table>\r\n\r\n        <tbody>\r\n\r\n          <tr>\r\n\r\n            <td>\r\n\r\n              <input\r\n\r\n                type=\"text\"\r\n\r\n                placeholder=\"Name of college\"\r\n\r\n                value={intermediateDetails.icollegeName}\r\n\r\n                onChange={(e) =>\r\n\r\n                  setIntermediateDetails({\r\n\r\n                    ...intermediateDetails,\r\n\r\n                    icollegeName: e.target.value,\r\n\r\n                  })\r\n\r\n                }\r\n\r\n              />\r\n\r\n            </td>\r\n\r\n            <td>\r\n\r\n              <input\r\n\r\n                type=\"text\"\r\n\r\n                placeholder=\"Board\"\r\n\r\n                value={intermediateDetails.iboard}\r\n\r\n                onChange={(e) =>\r\n\r\n                  setIntermediateDetails({\r\n\r\n                    ...intermediateDetails,\r\n\r\n                    iboard: e.target.value,\r\n\r\n                  })\r\n\r\n                }\r\n\r\n              />\r\n\r\n            </td>\r\n\r\n          </tr>\r\n\r\n          <tr>\r\n\r\n            <td>\r\n\r\n              <input\r\n\r\n                type=\"text\"\r\n\r\n                placeholder=\"Program\"\r\n\r\n                value={intermediateDetails.iprogram}\r\n\r\n                onChange={(e) =>\r\n\r\n                  setIntermediateDetails({\r\n\r\n                    ...intermediateDetails,\r\n\r\n                    iprogram: e.target.value,\r\n\r\n                  })\r\n\r\n                }\r\n\r\n              />\r\n\r\n            </td>\r\n\r\n            <td>\r\n\r\n              <input\r\n\r\n                type=\"text\"\r\n\r\n                placeholder=\"Percentage\"\r\n\r\n                value={intermediateDetails.ipercentage}\r\n\r\n                onChange={(e) =>\r\n\r\n                  setIntermediateDetails({\r\n\r\n                    ...intermediateDetails,\r\n\r\n                    ipercentage: e.target.value,\r\n\r\n                  })\r\n\r\n                }\r\n\r\n              />\r\n\r\n            </td>\r\n\r\n          </tr>\r\n\r\n          <tr>\r\n\r\n            <td>\r\n\r\n              <input\r\n\r\n                type=\"text\"\r\n\r\n                placeholder=\"Year of passing\"\r\n\r\n                value={intermediateDetails.iyearOfPassing}\r\n\r\n                onChange={(e) =>\r\n\r\n                  setIntermediateDetails({\r\n\r\n                    ...intermediateDetails,\r\n\r\n                    iyearOfPassing: e.target.value,\r\n\r\n                  })\r\n\r\n                }\r\n\r\n              />\r\n\r\n            </td>\r\n\r\n            <td>\r\n\r\n              <input\r\n\r\n                type=\"text\"\r\n\r\n                placeholder=\"city\"\r\n\r\n                value={intermediateDetails.iCity}\r\n\r\n                onChange={(e) =>\r\n\r\n                  setIntermediateDetails({\r\n\r\n                    ...intermediateDetails,\r\n\r\n                    iCity: e.target.value,\r\n\r\n                  })\r\n\r\n                }\r\n\r\n              />\r\n\r\n            </td>\r\n\r\n          </tr>\r\n\r\n          <tr>\r\n\r\n            <td>\r\n\r\n              <input\r\n\r\n                type=\"text\"\r\n\r\n                placeholder=\"State\"\r\n\r\n                value={intermediateDetails.iState}\r\n\r\n                onChange={(e) =>\r\n\r\n                  setIntermediateDetails({\r\n\r\n                    ...intermediateDetails,\r\n\r\n                    iState: e.target.value,\r\n\r\n                  })\r\n\r\n                }\r\n\r\n              />\r\n\r\n            </td>\r\n\r\n          </tr>\r\n\r\n        </tbody>\r\n\r\n      </table>\r\n\r\n \r\n\r\n      <p className=\"Details-name\">Engineering Details:</p>\r\n\r\n      <table>\r\n\r\n        <tbody>\r\n\r\n          <tr>\r\n\r\n            <td>\r\n\r\n              <input\r\n\r\n                type=\"text\"\r\n\r\n                placeholder=\"Name of college\"\r\n\r\n                value={graduationDetails.gcollegeName}\r\n\r\n                onChange={(e) =>\r\n\r\n                  setGraduationDetails({\r\n\r\n                    ...graduationDetails,\r\n\r\n                    gcollegeName: e.target.value,\r\n\r\n                  })\r\n\r\n                }\r\n\r\n              />\r\n\r\n            </td>\r\n\r\n            <td>\r\n\r\n              <input\r\n\r\n                type=\"text\"\r\n\r\n                placeholder=\"Board\"\r\n\r\n                value={graduationDetails.gboard}\r\n\r\n                onChange={(e) =>\r\n\r\n                  setGraduationDetails({\r\n\r\n                    ...graduationDetails,\r\n\r\n                    gboard: e.target.value,\r\n\r\n                  })\r\n\r\n                }\r\n\r\n              />\r\n\r\n            </td>\r\n\r\n          </tr>\r\n\r\n          <tr>\r\n\r\n            <td>\r\n\r\n              <input\r\n\r\n                type=\"text\"\r\n\r\n                placeholder=\"Program\"\r\n\r\n                value={graduationDetails.gprogram}\r\n\r\n                onChange={(e) =>\r\n\r\n                  setGraduationDetails({\r\n\r\n                    ...graduationDetails,\r\n\r\n                    gprogram: e.target.value,\r\n\r\n                  })\r\n\r\n                }\r\n\r\n              />\r\n\r\n            </td>\r\n\r\n            <td>\r\n\r\n              <input\r\n\r\n                type=\"text\"\r\n\r\n                placeholder=\"Percentage\"\r\n\r\n                value={graduationDetails.gpercentage}\r\n\r\n                onChange={(e) =>\r\n\r\n                  setGraduationDetails({\r\n\r\n                    ...graduationDetails,\r\n\r\n                    gpercentage: e.target.value,\r\n\r\n                  })\r\n\r\n                }\r\n\r\n              />\r\n\r\n            </td>\r\n\r\n          </tr>\r\n\r\n          <tr>\r\n\r\n            <td>\r\n\r\n              <input\r\n\r\n                type=\"text\"\r\n\r\n                placeholder=\"Year of Passing\"\r\n\r\n                value={graduationDetails.gyearOfPassing}\r\n\r\n                onChange={(e) =>\r\n\r\n                  setGraduationDetails({\r\n\r\n                    ...graduationDetails,\r\n\r\n                    gyearOfPassing: e.target.value,\r\n\r\n                  })\r\n\r\n                }\r\n\r\n              />\r\n\r\n            </td>\r\n\r\n            <td>\r\n\r\n              <input\r\n\r\n                type=\"text\"\r\n\r\n                placeholder=\"City\"\r\n\r\n                value={graduationDetails.gCity}\r\n\r\n                onChange={(e) =>\r\n\r\n                  setGraduationDetails({\r\n\r\n                    ...graduationDetails,\r\n\r\n                    gCity: e.target.value,\r\n\r\n                  })\r\n\r\n                }\r\n\r\n              />\r\n\r\n            </td>\r\n\r\n          </tr>\r\n\r\n          <tr>\r\n\r\n            <td>\r\n\r\n              <input\r\n\r\n                type=\"text\"\r\n\r\n                placeholder=\"State\"\r\n\r\n                value={graduationDetails.GState}\r\n\r\n                onChange={(e) =>\r\n\r\n                  setGraduationDetails({\r\n\r\n                    ...graduationDetails,\r\n\r\n                    gState: e.target.value,\r\n\r\n                  })\r\n\r\n                }\r\n\r\n              />\r\n\r\n            </td>\r\n\r\n          </tr>\r\n\r\n        </tbody>\r\n\r\n      </table>\r\n\r\n     \r\n      <p className=\"Details-name\">Skills:</p>\r\n      <div className=\"skills-buttons\">\r\n  <button\r\n    className={`skill-button ${skills.includes(\"HTML\") ? \"active\" : \"\"}`} type=\"button\"\r\n    onClick={() => handleSkillSelect(\"HTML\")}\r\n  >\r\n    HTML\r\n  </button>\r\n  <button\r\n    className={`skill-button ${skills.includes(\"CSS\") ? \"active\" : \"\"}`} type=\"button\"\r\n    onClick={() => handleSkillSelect(\"CSS\")}\r\n  >\r\n    CSS\r\n  </button>\r\n  <button\r\n    className={`skill-button ${skills.includes(\"JavaScript\") ? \"active\" : \"\"}`} type=\"button\"\r\n    onClick={() => handleSkillSelect(\"JavaScript\")}\r\n  >\r\n    JavaScript\r\n  </button>\r\n  <button\r\n    className={`skill-button ${skills.includes(\"Java\") ? \"active\" : \"\"}`} type=\"button\"\r\n    onClick={() => handleSkillSelect(\"Java\")}\r\n  >\r\n    Java\r\n  </button>\r\n  <button\r\n    className={`skill-button ${skills.includes(\"Python\") ? \"active\" : \"\"}`} type=\"button\"\r\n    onClick={() => handleSkillSelect(\"Python\")}\r\n  >\r\n    Python\r\n  </button>\r\n  <button\r\n    className={`skill-button ${skills.includes(\"React\") ? \"active\" : \"\"}`} type=\"button\"\r\n    onClick={() => handleSkillSelect(\"React\")}\r\n  >\r\n    React\r\n  </button>\r\n  <button\r\n    className={`skill-button ${skills.includes(\"SQL\") ? \"active\" : \"\"}`} type=\"button\"\r\n    onClick={() => handleSkillSelect(\"SQL\")}\r\n  >\r\n    SQL\r\n  </button>\r\n  <button\r\n    className={`skill-button ${skills.includes(\"MongoDB\") ? \"active\" : \"\"}`} type=\"button\"\r\n    onClick={() => handleSkillSelect(\"MongoDB\")}\r\n  >\r\n    MongoDB\r\n  </button>\r\n  <button\r\n    className={`skill-button ${skills.includes(\"MySQL\") ? \"active\" : \"\"}`} type=\"button\"\r\n    onClick={() => handleSkillSelect(\"MySQL\")}\r\n  >\r\n    MySQL\r\n  </button>\r\n  <button\r\n    className={`skill-button ${skills.includes(\"Bootstrap\") ? \"active\" : \"\"}`} type=\"button\"\r\n    onClick={() => handleSkillSelect(\"Bootstrap\")}\r\n  >\r\n    Bootstrap\r\n  </button>\r\n  <button\r\n    className={`skill-button ${skills.includes(\"Vue.js\") ? \"active\" : \"\"}`} type=\"button\"\r\n    onClick={() => handleSkillSelect(\"Vue.js\")}\r\n  >\r\n    Vue.js\r\n  </button>\r\n  <button\r\n    className={`skill-button ${skills.includes(\"Angular\") ? \"active\" : \"\"}`} type=\"button\"\r\n    onClick={() => handleSkillSelect(\"Angular\")}\r\n  >\r\n    Angular\r\n  </button>\r\n  <button\r\n    className={`skill-button ${skills.includes(\"Flutter\") ? \"active\" : \"\"}`} type=\"button\"\r\n    onClick={() => handleSkillSelect(\"Flutter\")}\r\n  >\r\n    Flutter\r\n  </button>\r\n</div>\r\n\r\n {/* ...Previous Code... */}\r\n\r\n<p className=\"Details-name\">Experience Details:</p>\r\n\r\n{experienceDetails.map((experience, index) => (\r\n  <table key={index} className=\"experience-table\">\r\n    <tbody>\r\n      <tr>\r\n        <td>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Company\"\r\n            value={experience.company}\r\n            onChange={(e) => handleExperienceChange(e, index, \"company\")}\r\n          />\r\n        </td>\r\n        <td>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Position\"\r\n            value={experience.position}\r\n            onChange={(e) => handleExperienceChange(e, index, \"position\")}\r\n          />\r\n        </td>\r\n        <td>\r\n          <input\r\n            type=\"date\"\r\n            placeholder=\"Start Date\"\r\n            value={experience.startDate}\r\n            onChange={(e) => handleExperienceChange(e, index, \"startDate\")}\r\n          />\r\n        </td>\r\n        <td>\r\n          <input\r\n            type=\"date\"\r\n            placeholder=\"End Date\"\r\n            value={experience.endDate}\r\n            onChange={(e) => handleExperienceChange(e, index, \"endDate\")}\r\n          />\r\n        </td>\r\n        <td>\r\n        <button type=\"button\" onClick={addExperience}>Add Experience</button>\r\n        </td>\r\n      </tr>\r\n    </tbody>\r\n   \r\n  </table>\r\n  \r\n))}\r\n\r\n\r\n\r\n\r\n\r\n\r\n      <button type=\"submit\">Submit</button>\r\n\r\n    </form>\r\n    \r\n    </div>\r\n\r\n  );\r\n\r\n};\r\n\r\n \r\n\r\nexport default Profile;",[],"C:\\Users\\Madar\\Desktop\\TalentTrackerFrontEnd\\src\\components\\JobDescription.js",[],[],"C:\\Users\\Madar\\Desktop\\TalentTrackerFrontEnd\\src\\components\\EmployerLogin.js",[],[],"C:\\Users\\Madar\\Desktop\\TalentTrackerFrontEnd\\src\\components\\UserTable.js",[],[],"C:\\Users\\Madar\\Desktop\\TalentTrackerFrontEnd\\src\\components\\OTPVerification.js",["147"],[],"import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst OTPVerification = ({ email, onOTPVerified, otpVerifyingInProgress, setOTPVerifyingInProgress }) => {\r\n  const [otp, setOTP] = useState('');\r\n  const [verificationError, setVerificationError] = useState('');\r\n  const [otpVerified, setOTPVerified] = useState(false); // New state\r\n  const apiUrl = process.env.REACT_APP_API_BASE_URL;\r\n\r\n  const handleVerifyOTP = async () => {\r\n    try {\r\n      setOTPVerifyingInProgress(true); // Start verifying process\r\n      // Send the entered OTP to the backend for verification\r\n      await axios.post(`${apiUrl}/verify-otp`, { email, otp });\r\n      setOTPVerified(true); // Set OTP verified state to true\r\n      onOTPVerified(); // Notify parent component\r\n    } catch (error) {\r\n      setVerificationError('Invalid OTP. Please try again.');\r\n    } finally {\r\n      setOTPVerifyingInProgress(false); // Finish verifying process\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (otpVerified) {\r\n      setOTPVerifyingInProgress(false); // Ensure verifying spinner is hidden when OTP is verified\r\n    }\r\n  }, [otpVerified]);\r\n\r\n  // If OTP is verified, show success message\r\n  if (otpVerified) {\r\n    return (\r\n      <div className=\"otp-verification\">\r\n        <p>OTP verified successfully!</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"otp-verification\">\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Enter OTP\"\r\n        value={otp}\r\n        onChange={(e) => setOTP(e.target.value)}\r\n      />\r\n      <button type=\"button\" onClick={handleVerifyOTP}>\r\n        {otpVerifyingInProgress ? (\r\n          <div className=\"spinner\"></div>\r\n        ) : (\r\n          'Verify OTP'\r\n        )}\r\n      </button>\r\n      {verificationError && (\r\n        <div className=\"error-message\">{verificationError}</div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default OTPVerification;\r\n","C:\\Users\\Madar\\Desktop\\TalentTrackerFrontEnd\\src\\components\\Sidebar.js",["148","149"],[],"import React from 'react';\r\nimport { Link, useNavigate } from 'react-router-dom';\r\nimport '../css/Sidebar.css';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faUser, faSearch, faFileAlt, faHeart, faBell, faClipboard } from '@fortawesome/free-solid-svg-icons'; // Import other icons as needed\r\nimport avatar from '../images/avatar.jpg'\r\nimport { useUserContext } from './UserProvider';\r\n\r\nconst Sidebar = () => {\r\n\r\n  const navigate = useNavigate();\r\n  const { user } = useUserContext();\r\n  const handleUpdateProfileClick = () => {\r\n    // Navigate to the profile page\r\n    navigate('/profile');\r\n  };\r\n\r\n  return (\r\n    <div className=\"sidebar\">\r\n    <div className=\"sidebar-top\">\r\n      <div className=\"avatar-container\">\r\n        <img src={avatar} alt=\"Avatar\" className=\"avatar\" />\r\n      </div>\r\n      <div className=\"user-name\">{user ? user.name : 'Guest'}</div>\r\n      <div className=\"user-email\">{user ? user.email : 'Guest@gmail.com'}</div>\r\n      <button className=\"update-profile-button\" onClick={handleUpdateProfileClick}>\r\n        Update Profile\r\n      </button>\r\n      </div>\r\n      <ul>\r\n        <li><FontAwesomeIcon icon={faSearch} />Find Jobs</li>\r\n        <li><FontAwesomeIcon icon={faFileAlt} />Jobs Applied</li>\r\n        <li><FontAwesomeIcon icon={faHeart} />Saved Jobs</li>\r\n        <li><FontAwesomeIcon icon={faBell} />Alerts</li>\r\n        <li><FontAwesomeIcon icon={faClipboard} />My Resume</li>\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Sidebar;\r\n",[],"C:\\Users\\Madar\\Desktop\\TalentTrackerFrontEnd\\src\\components\\JobCard.js",["150","151","152"],[],"C:\\Users\\Madar\\Desktop\\TalentTrackerFrontEnd\\src\\components\\UserProvider.js",[],[],"C:\\Users\\Madar\\Desktop\\TalentTrackerFrontEnd\\src\\components\\EmployerForgotPassword.js",["153"],[],"import React, { useState } from 'react';\r\nimport axios from 'axios';\r\nimport '../css/ForgotPassword.css'\r\n\r\nconst ForgotPassword = () => {\r\n  const [email, setEmail] = useState('');\r\n  const [otp, setOtp] = useState('');\r\n  const [password, setPassword] = useState(''); // New password field\r\n  const [confirmPassword, setConfirmPassword] = useState(''); // Confirm password field\r\n  const [resetSuccess, setResetSuccess] = useState(false);\r\n  const [resetError, setResetError] = useState('');\r\n  const [otpSent, setOtpSent] = useState(false);\r\n  const [otpVerified, setOtpVerified] = useState(false);\r\n  const [isPasswordValid, setIsPasswordValid] = useState(true); // Track password validation\r\n  const apiUrl = process.env.REACT_APP_API_BASE_URL;\r\n\r\n  const validatePassword = (value) => {\r\n    // Password must be at least 6 characters long\r\n    const isLengthValid = value.length >= 6;\r\n\r\n    // Password must contain at least one uppercase letter\r\n    const hasUppercase = /[A-Z]/.test(value);\r\n\r\n    // Password must contain at least one special character (non-alphanumeric)\r\n    const hasSpecialChar = /[^A-Za-z0-9]/.test(value);\r\n\r\n    // Password cannot contain spaces\r\n    const hasNoSpaces = !/\\s/.test(value);\r\n\r\n    const isValid = isLengthValid && hasUppercase && hasSpecialChar && hasNoSpaces;\r\n\r\n    setIsPasswordValid(isValid);\r\n\r\n    return isValid;\r\n  };\r\n\r\n  const handleSendOTP = async () => {\r\n    try {\r\n      // Send a request to the server to send an OTP to the provided email\r\n      const response = await axios.post(`${apiUrl}/verifyEmail`, { email });\r\n\r\n      if (response.data === 'OTP sent successfully') {\r\n        setOtpSent(true);\r\n        setResetSuccess(false);\r\n        setResetError('');\r\n      } else {\r\n        setOtpSent(false);\r\n        setOtpVerified(false);\r\n        setResetError('User with given Email Id was not found in the system');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error sending OTP:', error);\r\n      setOtpSent(false);\r\n      setOtpVerified(false);\r\n      setResetError('An error occurred. Please try again later.');\r\n    }\r\n  };\r\n\r\n  const handleVerifyOTP = async () => {\r\n    try {\r\n      // Send a request to the server to verify the OTP\r\n      const response = await axios.post(`${apiUrl}/verify-otp`, { email, otp });\r\n\r\n      if (response.data === 'OTP verified successfully') {\r\n        setOtpVerified(true);\r\n        setResetError('');\r\n      } else {\r\n        setOtpVerified(false);\r\n        setResetError('OTP verification failed. Please enter a valid OTP.');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error verifying OTP:', error);\r\n      setOtpVerified(false);\r\n      setResetError('OTP verification failed. Please enter a valid OTP.');\r\n    }\r\n  };\r\n\r\n  const handleResetPassword = async () => {\r\n\r\n    if (password !== confirmPassword) {\r\n      setResetSuccess(false);\r\n      setResetError('Passwords do not match. Please make sure the passwords match.');\r\n      return;\r\n    }\r\n    \r\n// Validate the password as the user types\r\nif (!validatePassword(password)) {\r\n  setResetSuccess(false);\r\n  setResetError('Password does not meet the criteria.');\r\n  return;\r\n}\r\n\r\n    try {\r\n      // Send a request to the server to reset the password with the new password\r\n      const response = await axios.post(`${apiUrl}/reset-password`, {\r\n        email,\r\n        password,\r\n        \r\n      });\r\n\r\n      if (response.data === 'Password reset was done successfully') {\r\n        setResetSuccess(true);\r\n        setResetError('');\r\n      } else {\r\n        setResetSuccess(false);\r\n        setResetError('Password reset failed. Please try again later.');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error resetting password:', error);\r\n      setResetSuccess(false);\r\n      setResetError('An error occurred. Please try again later.');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"forgot-password-container\">\r\n      <div className=\"forgot-password-content\">\r\n        \r\n        {resetSuccess ? (\r\n          <div className=\"success-message\">\r\n            Password reset was done successfully. Please click on JobSeekerLogin to continue\r\n          </div>\r\n        ) : (\r\n          <div>\r\n            <h2>Employer Forgot Password</h2>\r\n            <input\r\n              type=\"email\"\r\n              placeholder=\"Enter your Email\"\r\n              value={email}\r\n              onChange={(e) => setEmail(e.target.value)}\r\n            />\r\n            {otpSent ? (\r\n              otpVerified ? (\r\n                <div>\r\n                 \r\n                  <input\r\n                    type=\"password\"\r\n                    placeholder=\"New Password\"\r\n                    value={password}\r\n                    onChange={(e) => setPassword(e.target.value)}\r\n                  />\r\n                  \r\n\r\n                  <input\r\n                    type=\"password\"\r\n                    placeholder=\"Confirm New Password\"\r\n                    value={confirmPassword}\r\n                    onChange={(e) => setConfirmPassword(e.target.value)}\r\n                  />\r\n                  <div className=\"helpful-line\">\r\n  Password must be at least 6 characters long, contain one uppercase letter, one lowercase letter, one number, one special character, and no spaces.\r\n</div>\r\n\r\n                  <button onClick={handleResetPassword}>Reset Password</button>\r\n                  <p style={{ color: 'green' }}>OTP verified successfully!</p>\r\n                </div>\r\n              ) : (\r\n                <div>\r\n                  <input\r\n                    type=\"text\"\r\n                    placeholder=\"Enter OTP\"\r\n                    value={otp}\r\n                    onChange={(e) => setOtp(e.target.value)}\r\n                  />\r\n                  <button type=\"button\" onClick={handleVerifyOTP}>Verify OTP</button>\r\n                </div>\r\n              )\r\n            ) : (\r\n              <button type=\"button\" onClick={handleSendOTP}>Send OTP</button>\r\n            )}\r\n            {resetError && <div className=\"error-message\">{resetError}</div>}\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ForgotPassword;\r\n",{"ruleId":"154","severity":1,"message":"155","line":18,"column":10,"nodeType":"156","messageId":"157","endLine":18,"endColumn":29},{"ruleId":"154","severity":1,"message":"158","line":5,"column":8,"nodeType":"156","messageId":"157","endLine":5,"endColumn":22},{"ruleId":"154","severity":1,"message":"159","line":3,"column":10,"nodeType":"156","messageId":"157","endLine":3,"endColumn":20},{"ruleId":"154","severity":1,"message":"160","line":4,"column":10,"nodeType":"156","messageId":"157","endLine":4,"endColumn":25},{"ruleId":"154","severity":1,"message":"161","line":5,"column":10,"nodeType":"156","messageId":"157","endLine":5,"endColumn":21},{"ruleId":"154","severity":1,"message":"162","line":14,"column":10,"nodeType":"156","messageId":"157","endLine":14,"endColumn":25},{"ruleId":"154","severity":1,"message":"155","line":20,"column":10,"nodeType":"156","messageId":"157","endLine":20,"endColumn":29},{"ruleId":"154","severity":1,"message":"160","line":4,"column":10,"nodeType":"156","messageId":"157","endLine":4,"endColumn":25},{"ruleId":"154","severity":1,"message":"163","line":5,"column":10,"nodeType":"156","messageId":"157","endLine":5,"endColumn":16},{"ruleId":"154","severity":1,"message":"164","line":6,"column":10,"nodeType":"156","messageId":"157","endLine":6,"endColumn":16},{"ruleId":"154","severity":1,"message":"161","line":7,"column":10,"nodeType":"156","messageId":"157","endLine":7,"endColumn":21},{"ruleId":"154","severity":1,"message":"165","line":8,"column":10,"nodeType":"156","messageId":"157","endLine":8,"endColumn":22},{"ruleId":"154","severity":1,"message":"166","line":9,"column":10,"nodeType":"156","messageId":"157","endLine":9,"endColumn":22},{"ruleId":"154","severity":1,"message":"167","line":10,"column":9,"nodeType":"156","messageId":"157","endLine":10,"endColumn":17},{"ruleId":"154","severity":1,"message":"168","line":107,"column":10,"nodeType":"156","messageId":"157","endLine":107,"endColumn":20},{"ruleId":"154","severity":1,"message":"169","line":110,"column":10,"nodeType":"156","messageId":"157","endLine":110,"endColumn":23},{"ruleId":"154","severity":1,"message":"170","line":110,"column":25,"nodeType":"156","messageId":"157","endLine":110,"endColumn":41},{"ruleId":"171","severity":1,"message":"172","line":28,"column":6,"nodeType":"173","endLine":28,"endColumn":19,"suggestions":"174"},{"ruleId":"154","severity":1,"message":"175","line":2,"column":10,"nodeType":"156","messageId":"157","endLine":2,"endColumn":14},{"ruleId":"154","severity":1,"message":"163","line":5,"column":10,"nodeType":"156","messageId":"157","endLine":5,"endColumn":16},{"ruleId":"154","severity":1,"message":"176","line":3,"column":8,"nodeType":"156","messageId":"157","endLine":3,"endColumn":16},{"ruleId":"154","severity":1,"message":"177","line":4,"column":8,"nodeType":"156","messageId":"157","endLine":4,"endColumn":15},{"ruleId":"154","severity":1,"message":"178","line":23,"column":9,"nodeType":"156","messageId":"157","endLine":23,"endColumn":22},{"ruleId":"154","severity":1,"message":"162","line":14,"column":10,"nodeType":"156","messageId":"157","endLine":14,"endColumn":25},"no-unused-vars","'registrationSuccess' is assigned a value but never used.","Identifier","unusedVar","'ForgotPassword' is defined but never used.","'faUserPlus' is defined but never used.","'FontAwesomeIcon' is defined but never used.","'faSignInAlt' is defined but never used.","'isPasswordValid' is assigned a value but never used.","'faUser' is defined but never used.","'faHome' is defined but never used.","'faSignOutAlt' is defined but never used.","'faUserCircle' is defined but never used.","'navigate' is assigned a value but never used.","'resumeFile' is assigned a value but never used.","'selectedSkill' is assigned a value but never used.","'setSelectedSkill' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'setOTPVerifyingInProgress'. Either include it or remove the dependency array. If 'setOTPVerifyingInProgress' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["179"],"'Link' is defined but never used.","'Location' is defined but never used.","'Company' is defined but never used.","'handleViewJob' is assigned a value but never used.",{"desc":"180","fix":"181"},"Update the dependencies array to be: [otpVerified, setOTPVerifyingInProgress]",{"range":"182","text":"183"},[1129,1142],"[otpVerified, setOTPVerifyingInProgress]"]